[{"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\index.js":"1","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\store.js":"2","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\App.js":"3","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\index.js":"4","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\index.js":"5","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\NavBar.js":"6","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Projects.js":"7","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Login.js":"8","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\EditProject.js":"9","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Home.js":"10","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\index.js":"11","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Devices.js":"12","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\BusinessDetails.js":"13","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\ProjectForm.js":"14","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\GateModal.js":"15","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ConfirmModal.js":"16","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\QueryModal.js":"17","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\DeviceModal.js":"18","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\index.js":"19","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\alertService.js":"20","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\AlertGroup.js":"21","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\api.js":"22","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\TablePaginationActions.js":"23","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\LedConfig.js":"24","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\PlateRegex.js":"25","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Records.js":"26","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\ParkRecords.js":"27","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\ParkingRules.js":"28","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Gates.js":"29","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\RulesModal.js":"30","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ImageModal.js":"31","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Whitelist.js":"32","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\WhitelistModal.js":"33"},{"size":315,"mtime":1618497854270,"results":"34","hashOfConfig":"35"},{"size":853,"mtime":1619884797592,"results":"36","hashOfConfig":"35"},{"size":3270,"mtime":1620319868675,"results":"37","hashOfConfig":"35"},{"size":614,"mtime":1620151918951,"results":"38","hashOfConfig":"35"},{"size":477,"mtime":1620150942991,"results":"39","hashOfConfig":"35"},{"size":5856,"mtime":1620151057067,"results":"40","hashOfConfig":"35"},{"size":8632,"mtime":1619627370173,"results":"41","hashOfConfig":"35"},{"size":4244,"mtime":1618497854321,"results":"42","hashOfConfig":"35"},{"size":2348,"mtime":1619625339641,"results":"43","hashOfConfig":"35"},{"size":8819,"mtime":1620326285190,"results":"44","hashOfConfig":"35"},{"size":282,"mtime":1619275881959,"results":"45","hashOfConfig":"35"},{"size":9096,"mtime":1620326304441,"results":"46","hashOfConfig":"35"},{"size":5717,"mtime":1619626971218,"results":"47","hashOfConfig":"35"},{"size":7273,"mtime":1620155617167,"results":"48","hashOfConfig":"35"},{"size":10931,"mtime":1620155977614,"results":"49","hashOfConfig":"35"},{"size":764,"mtime":1618858211721,"results":"50","hashOfConfig":"35"},{"size":1249,"mtime":1618940686909,"results":"51","hashOfConfig":"35"},{"size":14926,"mtime":1620156318777,"results":"52","hashOfConfig":"35"},{"size":1736,"mtime":1620320999687,"results":"53","hashOfConfig":"35"},{"size":1196,"mtime":1618770665625,"results":"54","hashOfConfig":"35"},{"size":1652,"mtime":1618772534336,"results":"55","hashOfConfig":"35"},{"size":17021,"mtime":1620324025646,"results":"56","hashOfConfig":"35"},{"size":1714,"mtime":1618841461587,"results":"57","hashOfConfig":"35"},{"size":7807,"mtime":1619626977372,"results":"58","hashOfConfig":"35"},{"size":15507,"mtime":1619883318235,"results":"59","hashOfConfig":"35"},{"size":13224,"mtime":1620271902087,"results":"60","hashOfConfig":"35"},{"size":222,"mtime":1619113662369,"results":"61","hashOfConfig":"35"},{"size":8684,"mtime":1620155867882,"results":"62","hashOfConfig":"35"},{"size":9197,"mtime":1620155698440,"results":"63","hashOfConfig":"35"},{"size":8934,"mtime":1619436851989,"results":"64","hashOfConfig":"35"},{"size":292,"mtime":1619430373878,"results":"65","hashOfConfig":"35"},{"size":10774,"mtime":1620325998421,"results":"66","hashOfConfig":"35"},{"size":11556,"mtime":1620325967399,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1udplq",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"70"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\index.js",[],["155","156"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\store.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\App.js",["157"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\NavBar.js",["158","159","160"],"import {\r\n  SidebarContent,\r\n  ProSidebar,\r\n  Menu,\r\n  MenuItem,\r\n  SubMenu\r\n} from \"react-pro-sidebar\";\r\nimport \"react-pro-sidebar/dist/css/styles.css\";\r\nimport { List } from \"react-bootstrap-icons\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport { store } from \"../store.js\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport LocalParkingIcon from '@material-ui/icons/LocalParking';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nexport function NavBar() {\r\n  const storeContext = useContext(store);\r\n  const { dispatch } = storeContext;\r\n  const globalState = storeContext.state;\r\n  const {toggled, user}  = globalState;\r\n  let history = useHistory();\r\n  const logout = () => {\r\n    dispatch({\r\n      type: \"setAuth\",\r\n      value: false\r\n    });\r\n    dispatch({\r\n      type: \"setUser\",\r\n      value: \"\"\r\n    });\r\n    history.push(\"/\");\r\n  };\r\n  const direct = (path) => {\r\n    console.log(\"clicked\", path);\r\n    history.push(path);\r\n  };\r\n  const toggleSideBar = () => {\r\n    dispatch({\r\n      type: \"setToggled\"\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"h-100 fixed-top clickThrough\">\r\n      <ProSidebar\r\n        className=\"clickAble navbar-default navbar-static-top sideBar\"\r\n        collapsed={toggled}\r\n        width=\"250px\"\r\n        //collapsedWidth=\"px\"\r\n      >\r\n        <SidebarContent>\r\n          <Menu iconShape=\"circle\">\r\n            <MenuItem \r\n              style={{\"background\":\"#2c3b41\",\"height\":\"60px\", \"pointer-events\":\"none\"}}\r\n              className=\"d-flex justify-content-center align-items-center\">\r\n              <div style={{\"padding-top\":\"10px\", \"color\":\"white\"}}>\r\n                <h5>Admin</h5>\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem \r\n              icon={<AccountCircleIcon fontSize='large'/>}\r\n              style={{\"pointer-events\":\"none\", \"border-bottom\":\"1px solid gray\"}}>\r\n              <div style={{ \"color\":\"white\"}}>\r\n                Welcome, {user}\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<HomeIcon onClick={()=>direct(\"/home\")}/>}>\r\n              <div onClick={()=>direct(\"/home\")}>\r\n                Home\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<InfoIcon onClick={()=>direct(\"/project\")} />}>\r\n              <div onClick={()=>direct(\"/project\")}>\r\n                Project\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<CodeIcon onClick={()=>direct(\"/regex\")} />}>\r\n              <div onClick={()=>direct(\"/regex\")}>\r\n                Plate Regex\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<StorageIcon onClick={()=>direct(\"/records\")} />}>\r\n              <div onClick={()=>direct(\"/records\")}>\r\n                Exit/Entry Records\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<LocalParkingIcon onClick={()=>direct(\"/parking\")} />}>\r\n              <div onClick={()=>direct(\"/parking\")}>\r\n                Parking Records\r\n              </div>\r\n            </MenuItem>\r\n            <SubMenu title=\"Access\" icon={<PaymentIcon/>}>\r\n              <MenuItem  onClick={()=>direct(\"/accessRules\")} >Access Rules</MenuItem>\r\n              <MenuItem onClick={()=>direct(\"/whitelist\")}>Whitelist Entries</MenuItem>\r\n            </SubMenu>\r\n          </Menu>\r\n        </SidebarContent>\r\n      </ProSidebar>\r\n      <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" className={\"clickAble navBar\"+(toggled?\" navBar-collapsed\":\" navBar-expand\")}>\r\n        <Navbar.Brand \r\n        className=\"sideBar\" \r\n        onClick={toggleSideBar}>\r\n          <List />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"nav-dropdown\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto nav-dropdown\">\r\n            <Nav.Link>\r\n              <div onClick={()=>direct(\"/home\")}>\r\n                Home\r\n              </div>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n              <div onClick={()=>direct(\"/project\")}>\r\n                Project\r\n              </div>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n              <div onClick={()=>direct(\"/regex\")}>\r\n                Plate Regex\r\n              </div>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n              <div onClick={()=>direct(\"/records\")}>\r\n                Log Records\r\n              </div>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n              <div onClick={()=>direct(\"/parking\")}>\r\n                Parking Records\r\n              </div>\r\n            </Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item data-value=\"/home\" onClick={direct}>\r\n                Action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Navbar.Text>\r\n            <Nav.Link onClick={logout}>Signout</Nav.Link>\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { NavBar };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Projects.js",["161","162","163","164"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport {TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { PencilSquare, Trash } from \"react-bootstrap-icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ConfirmModal, TablePaginationActions } from \"../components/index.js\";\r\nimport {getProjects, addProject, delProject, alertService } from '../services/index.js';\r\n\r\nexport function Projects({ match }) {\r\n  let history = useHistory();\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [toggle, setToggle] = useState({\r\n    delete: false,\r\n    add: false\r\n  });\r\n  const [curID, setCurID] = useState(\"\");\r\n  const [state, setState] = useState({\r\n    projectName: \"\",\r\n    location: \"\",\r\n    projectType: \"\"\r\n  });\r\n  const [curState, setCurState] = useState({\r\n    projectName: \"\",\r\n    location: \"\",\r\n    projectType: \"\"\r\n  });\r\n  const reset = () =>{\r\n    setState({\r\n      projectName: \"\",\r\n      location: \"\",\r\n      projectType: \"\"\r\n    });\r\n    setCurState({\r\n      projectName: \"\",\r\n      location: \"\",\r\n      projectType: \"\"\r\n    });\r\n  }\r\n  const [dummy, setDummy] = useState(false);\r\n  const reload = () =>{\r\n    getProjects([\"projectID\", \"projectName\", \"location\", \"projectType\"])\r\n      .then(async (data) => {\r\n        console.log(data.content);\r\n        setInitialRows(data.content);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    reload();\r\n  }, [dummy]);\r\n\r\n  useEffect(() => {\r\n    filter();\r\n  }, [initialRows, curState]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  const activateModal = (projectID) => {\r\n    setCurID(projectID);\r\n    toggleModal(\"delete\");\r\n  };\r\n\r\n  const filter = (e) => {\r\n    let { projectName, location, projectType } = curState;\r\n    let curRows = initialRows;\r\n    console.log(curRows);\r\n    setRows(\r\n      curRows.filter(\r\n        (row) =>\r\n          row[\"projectName\"].toLowerCase().indexOf(projectName.toLowerCase()) >= 0 &&\r\n          row[\"location\"].toLowerCase().indexOf(location.toLowerCase()) >= 0 &&\r\n          row[\"projectType\"].toLowerCase().indexOf(projectType.toLowerCase()) >= 0\r\n      )\r\n    );\r\n  };\r\n\r\n  const insert = (e) => {\r\n    addProject()\r\n      .then(async (data) => {\r\n        let ID = data.message.projectID;\r\n        history.push(\"/project/\" + ID);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  const edit = (projectID) => {\r\n    history.push(\"/project/\" + projectID);\r\n  };\r\n\r\n  const del = async (projectID) => {\r\n    delProject(projectID)\r\n    .then(async (data) => {\r\n      reload();\r\n      toggleModal(\"delete\");\r\n      alertService.success(\"Project Deleted\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delete}\r\n        success={() => {\r\n          del(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delete\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this project?\"\r\n      />\r\n      <ConfirmModal\r\n        hide={toggle.add}\r\n        success={() => {\r\n          insert();\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"add\");\r\n        }}\r\n        title=\"Confirm Addition\"\r\n        body=\"Add a new project?\"\r\n      />\r\n\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Projects</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n        <Form inline className=\"rightFlex\" onSubmit={(e)=>{e.preventDefault();}}>\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"projectName\"\r\n                placeholder=\"Name\"\r\n                onChange={handleChange}\r\n                value={state.projectName}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"location\"\r\n                placeholder=\"Location\"\r\n                onChange={handleChange}\r\n                value={state.location}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"projectType\"\r\n                placeholder=\"Type\"\r\n                onChange={handleChange}\r\n                value={state.projectType}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" onClick={()=>{setCurState(state)}}>\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" variant=\"secondary\" onClick={reset}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button\r\n                className=\"btn btn-success\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  toggleModal(\"add\");\r\n                }}\r\n              >\r\n                Add +\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Project</TableCell>\r\n                <TableCell align=\"left\">Location</TableCell>\r\n                <TableCell align=\"left\">Type</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row) => (\r\n                <TableRow key={row.projectName}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.projectName}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">{row.location}</TableCell>\r\n                  <TableCell align=\"left\">{row.projectType}</TableCell>\r\n                  <TableCell align=\"right\" style={{padding:0}}>\r\n                    <IconButton onClick={() => edit(row.projectID)}>\r\n                      <PencilSquare\r\n                        data-value={row.projectID}\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => activateModal(row.projectID)}>\r\n                      <Trash color=\"red\" size={21} />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                colSpan={4}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Projects };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Login.js",["165","166"],"import React, { useState, useContext } from \"react\";\r\nimport { store } from \"../store.js\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport function Login() {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const { dispatch } = storeContext;\r\n  let history = useHistory();\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    password: \"\"\r\n  });\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n  const reqLogin = (e) => {\r\n    e.preventDefault();\r\n    let { username, password } = state;\r\n    /*\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        username,\r\n        password\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL + \"/login\", requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n  \r\n      dispatch({\r\n        type: \"setAuth\",\r\n        value: true\r\n      });\r\n      return(\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/home\"\r\n          }}\r\n        />\r\n      );\r\n    })\r\n    .catch((error) => {\r\n      this.setState({ errorMessage: error.toString() });\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n    if (username === \"huajun\" && password === \"huajun\") {\r\n      dispatch({\r\n        type: \"setAuth\",\r\n        value: true\r\n      });\r\n      dispatch({\r\n        type: \"setUser\",\r\n        value: username\r\n      });\r\n      history.push(\"/home\");\r\n    } else if (username.length === 0) {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Username cannot be blank\";\r\n    } else if (password.length === 0) {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Password cannot be blank\";\r\n    } else {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Invalid Username or Password\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"maincontainer h-100\">\r\n      <div className=\"container-fluid bg-light h-100\">\r\n        <div className=\"login d-flex align-items-center py-5\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-10 col-sm-6 col-md-5 col-xl-4 mx-auto \">\r\n                <h3 className=\"display-4\">Login</h3>\r\n                <p className=\"text-muted mb-4\">\r\n                  Enter your credentials to login.\r\n                </p>\r\n                <form>\r\n                  <div className=\"form-group mb-3\">\r\n                    <input\r\n                      id=\"username\"\r\n                      type=\"username\"\r\n                      placeholder=\"Username\"\r\n                      required=\"required\"\r\n                      className=\"form-control rounded-pill border-0 shadow-sm px-4\"\r\n                      onChange={handleChange}\r\n                      value={state.username}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group mb-3\">\r\n                    <input\r\n                      id=\"password\"\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      required=\"required\"\r\n                      className=\"form-control rounded-pill border-0 shadow-sm px-4 text-primary\"\r\n                      onChange={handleChange}\r\n                      value={state.password}\r\n                    />\r\n                  </div>\r\n                  <p id=\"login-error\" className=\"text-danger\"></p>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block text-uppercase mb-2 rounded-pill shadow-sm\"\r\n                    onClick={reqLogin}\r\n                  >\r\n                    Sign in\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Login };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\EditProject.js",["167","168","169"],"import {\r\n  ProjectForm,\r\n  BusinessDetails,\r\n  Devices,\r\n  LedConfig,\r\n  Gates\r\n} from \"./projectSubPages/index.js\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport {Nav, Tab} from \"react-bootstrap\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  useHistory,\r\n  useRouteMatch,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nexport function EditProject(props) {\r\n  let history = useHistory();\r\n  let { path, url } = useRouteMatch();\r\n  let {pathname} = useLocation();\r\n  let page = pathname.split('/')[3];\r\n  const direct = (path) =>{\r\n    history.push(url+path);\r\n  }\r\n  return (\r\n    <div className=\"tabModal\" style={{background:\"transparent\"}}>\r\n      <Tab.Container id=\"left-tabs-example\" >\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <Nav variant=\"pills\" className=\"flex-column\">\r\n              <Nav.Item>\r\n                <Nav.Link onClick={()=>{direct(\"/info\")}} active = {page===\"info\"}>Infomation</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link onClick={()=>{direct(\"/business\")}} active = {page===\"business\"}>Business</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link onClick={()=>{direct(\"/gate\")}} active = {page===\"gate\"}>Gates</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link onClick={()=>{direct(\"/ledconfig\")}} active = {page===\"ledconfig\"}>LED Config</Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Col>\r\n          <Col sm={9}>\r\n          <Switch>\r\n            <Route exact path={`${path}/info`}>\r\n              <ProjectForm />\r\n            </Route>\r\n            <Route exact path={`${path}/business`}>\r\n              <BusinessDetails />\r\n            </Route>\r\n            <Route exact path={`${path}/gate/:gateID`}>\r\n              <Devices />\r\n            </Route>\r\n            <Route exact path={`${path}/gate`}>\r\n              <Gates />\r\n            </Route>\r\n            <Route exact path={`${path}/ledconfig`}>\r\n              <LedConfig />\r\n            </Route>\r\n            <Route path={path}>\r\n              <Redirect to={`${url}/info`} />\r\n            </Route>\r\n          </Switch>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { EditProject };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Home.js",["170","171","172","173","174","175","176","177","178","179","180","181"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Devices.js",["182","183","184","185","186","187","188","189","190","191","192"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\BusinessDetails.js",["193","194","195","196","197"],"import { useState, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, InputGroup, Breadcrumb } from \"react-bootstrap\";\r\nimport NumericInput from \"react-numeric-input\";\r\nimport { alertService, getBusinessInfo, updateBusinessInfo, getProjectInfo } from '../../services/index.js';\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport function BusinessDetails(props) {\r\n  let {projectID} = useParams();\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [state, setState] = useState({\r\n    barrierDelay: 5,\r\n    networkWarningDuration: 5,\r\n    instantImgUpload: false,\r\n    vehicleColorDetect: false,\r\n    localImgStore: false\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getProjectInfo(projectID)\r\n    .then(async (data) => {\r\n      setProjectName(data.message.projectName);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"Get Project Info, there was an error!\", error);\r\n    });\r\n    /*   \r\n    getBusinessInfo(projectID)\r\n    .then(async (data) => {\r\n      setState(data.message)\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n    let res = {\r\n      barrierDelay: 5,\r\n      networkWarningDuration: 5,\r\n      instantImgUpload: false,\r\n      vehicleColorDetect: false,\r\n      localImgStore: false\r\n    };\r\n    setState(res);\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    if (typeof state[id] === \"boolean\") {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    update();\r\n  };\r\n\r\n  const update = () => {\r\n    /* Pending API for project details update*/\r\n  };\r\n\r\n  function myFormat(num) {\r\n    return num + \" mins\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/project\">Projects</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Business Details</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n      <h5 style={{color:\"#6c757d\"}}>{projectName}</h5>\r\n      </Breadcrumb>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Barrier Opening Delay\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <InputGroup>\r\n              <NumericInput\r\n                strict\r\n                id=\"barrierDelay\"\r\n                format={myFormat}\r\n                className=\"form-control\"\r\n                value={state.barrierDelay}\r\n                min={0}\r\n                max={100}\r\n                onChange={handleChange}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Duration before issuing network down warning\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <InputGroup>\r\n              <NumericInput\r\n                strict\r\n                id=\"networkWarningDuration\"\r\n                format={myFormat}\r\n                className=\"form-control\"\r\n                value={state.networkWarningDuration}\r\n                min={0}\r\n                max={100}\r\n                onChange={handleChange}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Instant Image Upload to Server\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.instantImgUpload}\r\n              type=\"switch\"\r\n              id=\"instantImgUpload\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Local Storage of images after uploading\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\" align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.localImgStore}\r\n              type=\"switch\"\r\n              id=\"localImgStore\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Vehicle Colour Detection\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\" align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.vehicleColorDetect}\r\n              type=\"switch\"\r\n              id=\"vehicleColorDetect\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Col sm={8}\r\n           className=\"d-flex justify-content-end\">\r\n            <Button type=\"submit\">Update</Button>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { BusinessDetails };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\ProjectForm.js",["198","199","200","201","202"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { alertService, getProjectInfo, updateProjectInfo , getObjectTypes} from '../../services/index.js';\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport function ProjectForm() {\r\n  let { projectID }= useParams();\r\n  const [validated, setValidated] = useState(false);\r\n  const [state, setState] = useState({\r\n    projectName: \"\",\r\n    projectType: \"\",\r\n    location: \"\",\r\n    contactNumber: \"\",\r\n    maCompany: \"\",\r\n    equipManu: \"\"\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n  const [projectTypes, setProjectTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getProjectInfo(projectID)\r\n      .then(async (data) => {\r\n        setState(data.message);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error Get Project Info!\", error);\r\n      });\r\n      getObjectTypes(\"project\")\r\n      .then(async (data) => {\r\n        setProjectTypes(Object.entries(data.message).map((type)=>({\r\n          id: type[0],\r\n          name: type[1].name\r\n        })));\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error Get Project Types!\", error);\r\n      });\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    console.log(form.checkValidity());\r\n    if (form.checkValidity()) update();\r\n  };\r\n\r\n  const update = () => {\r\n    updateProjectInfo(projectID, state)\r\n      .then(async (data) => {\r\n        alertService.success('Update Successful!');\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/project\">Projects</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Project Info</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project ID\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control type=\"text\" placeholder={projectID} readOnly />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project Name\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              placeholder=\"Name\"\r\n              id=\"projectName\"\r\n              name=\"projectName\"\r\n              value={state.projectName}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Project Name is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project Type\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              custom\r\n              required\r\n              as=\"select\"\r\n              id=\"projectType\"\r\n              name=\"projectType\"\r\n              value={state.projectType===null? '':state.projectType}\r\n              onChange={handleChange}\r\n            >\r\n              <option value={''}>--Select Type--</option>\r\n              {\r\n                projectTypes.map((type)=>(\r\n                  <option value={type.id}>{type.name}</option>\r\n                ))\r\n              }\r\n            </Form.Control>\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Project Type is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Location\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"location\"\r\n              name=\"location\"\r\n              value={state.location}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Location is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Equipment Manufacturer\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"equipManu\"\r\n              name=\"equipManu\"\r\n              value={state.equipManu}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Equipment Manufacturer is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n      </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            MA Company\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"maCompany\"\r\n              name=\"maCompany\"\r\n              value={state.maCompany}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              MA Company is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Contact No.\r\n          </Form.Label>\r\n          <Form.Label\r\n            column\r\n            sm={4}\r\n          >\r\n            <PhoneInput\r\n              inputProps={{\r\n                required: true\r\n              }}\r\n              placeholder=\"+XX-XXXX-XXXX\"\r\n              id=\"contactNumber\"\r\n              name=\"contactNumber\"\r\n              country={\"sg\"}\r\n              value={String(state.contactNumber)}\r\n              onChange={(e)=>{\r\n                setState((prevState) => ({\r\n                  ...prevState,\r\n                  [\"contactNumber\"]: parseInt(e)\r\n                }));\r\n              }}\r\n              isValid={(value, country) => {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              }}\r\n            />\r\n          </Form.Label>\r\n        </Form.Group>\r\n\r\n        \r\n        <Form.Group as={Row}>\r\n          <Col sm={8}\r\n           className=\"d-flex justify-content-end\">\r\n            <Button type=\"submit\">Update</Button>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { ProjectForm };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\GateModal.js",["203","204","205","206","207","208","209","210"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Modal } from \"react-bootstrap\";\r\nimport TimeField from 'react-simple-timefield';\r\nimport { alertService, createGate, getGateInfo, updateGateInfo, getWhitelistTags } from '../services/index.js';\r\n\r\nexport function GateModal(props) {\r\n    let {hide, gateID, toggleModal, success, newState, projectID, gateTypes } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [state, setState] = useState({});\r\n    const [dummy, setDummy] = useState(false);\r\n    const [whiteListTags, setWhiteListTags] = useState([]);\r\n    const newInitialState = {\r\n      gateName: \"\",\r\n      gateType: \"\",\r\n      isChargeable: false,\r\n      ledOnTime: \"00:00:00\",\r\n      ledOffTime: \"00:00:00\",\r\n      allowedTypes: []\r\n    };\r\n\r\n  useEffect(() => {\r\n    setValidated(false);\r\n    console.log(\"gateModal\", gateID, projectID, newState);\r\n    if(!hide){\r\n      setState(newInitialState);\r\n    }else if(newState){\r\n      setState(newInitialState);\r\n    }else{\r\n      getGateInfo(gateID)\r\n      .then(async (data) => {\r\n        if(data.message.allowedTypes!==null){\r\n          setState(data.message);\r\n        }else{\r\n          setState({\r\n            ...data.message,\r\n            allowedTypes: []\r\n          })\r\n        }\r\n        console.log(data.message);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"Get Gate, There was an error!\", error);\r\n      });\r\n    }\r\n    getWhitelistTags()\r\n    .then(async (data) => {\r\n      setWhiteListTags(data.message.whitelistTags);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"Get WhiteList Tags, There was an error!\", error);\r\n    });\r\n  }, [dummy,hide]);\r\n\r\n  const handleTagChange = (e) =>{\r\n    let {id, value} = e.target;\r\n    let idx = state.allowedTypes.indexOf(id);\r\n    if(idx==-1){\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        allowedTypes: prevState.allowedTypes.concat([id])\r\n      }));\r\n    }else{\r\n      let tempList = state.allowedTypes;\r\n      tempList.splice(idx,1);\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        allowedTypes: tempList\r\n      }));\r\n    }\r\n  }\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    console.log(typeof state[id]);\r\n    if (typeof state[id] === \"boolean\") {\r\n        console.log(\"bool\");\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if (form.checkValidity()){\r\n      if(newState) create();\r\n      else update();\r\n    }\r\n  };\r\n\r\n  const update = () => {\r\n    updateGateInfo(gateID, state)\r\n    .then(async (data) => {\r\n      setValidated(false);\r\n        alertService.success(\"Update Successful!\");\r\n        success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Update Gate, There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  const create = () =>{\r\n    createGate(projectID, state)\r\n    .then(async (data) => {\r\n      setValidated(false);\r\n      alertService.success(\"Addition Successful!\");\r\n      success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Add Gate, There was an error!\", error);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal show={hide} onHide={()=>{\r\n      setValidated(false);\r\n      toggleModal();}}>\r\n            <Modal.Header\r\n             closeButton>\r\n                <Modal.Title>{newState?\"Add Gate\":\"Edit Gate\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Form id='gateModal' noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Name\"\r\n                        id=\"gateName\"\r\n                        name=\"gateName\"\r\n                        value={state.gateName}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Gate Name is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate Type\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        custom\r\n                        required\r\n                        as=\"select\"\r\n                        id=\"gateType\"\r\n                        name=\"gateType\"\r\n                        value={state.gateType===null?\"\":state.gateType}\r\n                        onChange={handleChange}\r\n                        >\r\n                        <option value={\"\"}>--Select Type--</option>\r\n                        {gateTypes.map((type)=>(\r\n                          <option value={type.id}>{type.name}</option>\r\n                        ))}\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Gate Type is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Charge fee for entry\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isChargeable}\r\n                        type=\"switch\"\r\n                        id=\"isChargeable\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                    Time to turn on the LPR camera’s LED\r\n                    </Form.Label>\r\n                    <Form.Label\r\n                        column\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex\"\r\n                    >\r\n                        <TimeField \r\n                        value={state.ledOnTime} \r\n                        onChange={handleChange}\r\n                        showSeconds = {true}\r\n                        input={\r\n                            <Form.Control\r\n                              required\r\n                              id = \"ledOnTime\"\r\n                              type=\"text\"\r\n                              name=\"ledOnTime\"\r\n                              placeholder=\"Time\"\r\n                            />\r\n                        } />\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Time to turn off the LPR\r\n                    </Form.Label>\r\n                    <Form.Label\r\n                        column\r\n                        className=\"align-items-center d-flex\"\r\n                        sm={6}\r\n                    >\r\n                        <TimeField \r\n                        value={state.ledOffTime} \r\n                        onChange={handleChange}\r\n                        showSeconds = {true}\r\n                        input={\r\n                            <Form.Control\r\n                              required\r\n                              id = \"ledOffTime\"\r\n                              type=\"text\"\r\n                              name=\"ledOffTime\"\r\n                              placeholder=\"Time\"\r\n                            />\r\n                        } />\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Whitelist Tags\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                      <Col\r\n                          sm={6}\r\n                      >\r\n                        {whiteListTags.map((tag, index)=>(\r\n                            <div>{\r\n                                index%2==0?\r\n                            <Form.Check \r\n                                custom\r\n                                type={'checkbox'}\r\n                                id={tag}\r\n                                checked={state.allowedTypes.includes(tag)}\r\n                                onChange={handleTagChange}\r\n                                label={tag}\r\n                            />:null\r\n                            }</div>\r\n                        ))}\r\n                      </Col>\r\n                      <Col\r\n                          sm={6}\r\n                      >\r\n                        {whiteListTags.map((tag, index)=>(\r\n                            <div>{\r\n                                index%2==1?\r\n                            <Form.Check \r\n                                custom\r\n                                type={'checkbox'}\r\n                                id={tag}\r\n                                checked={state.allowedTypes.includes(tag)}\r\n                                onChange={handleTagChange}\r\n                                label={tag}\r\n                            />:null\r\n                            }</div>\r\n                        ))}\r\n                      </Col>\r\n                    </Form.Group>\r\n                </div>\r\n            </Form>\r\n          </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=>{\r\n    setValidated(false);\r\n    toggleModal();}}>\r\n            Cancel\r\n          </Button>\r\n          <Button form =\"gateModal\" variant=\"primary\" type=\"submit\">\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default { GateModal };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ConfirmModal.js",["211"],"import { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport function ConfirmModal(props) {\r\n  let toggleModal = props.toggleModal;\r\n  let success = props.success;\r\n  let hide = props.hide;\r\n  let body = props.body;\r\n  let title = props.title;\r\n  return (\r\n    <Modal show={hide} onHide={toggleModal}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{body}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={toggleModal}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={()=>{\r\n          success();\r\n        }}>\r\n          Confirm\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default { ConfirmModal};\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\QueryModal.js",["212"],"import { Button, Modal, Form } from \"react-bootstrap\";\r\nimport {useState} from 'react';\r\n\r\nexport function QueryModal(props) {\r\n    let toggleModal = props.toggleModal;\r\n    let success = props.success;\r\n    let hide = props.hide;\r\n    let body = props.body;\r\n    let title = props.title;\r\n    const [value,setValue] = useState(\"\");\r\n    const handleChange = (e) =>{\r\n      setValue(e.target.value);\r\n    }\r\n    const exit = () =>{\r\n      setValue(\"\");\r\n      toggleModal();\r\n    }\r\n    return (\r\n      <Modal show={hide} onHide={exit}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Label>{body}</Form.Label>\r\n            <Form.Control \r\n            value={value}\r\n            onChange={handleChange}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={exit}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={()=>{\r\n              success(value);\r\n              exit();\r\n              }}>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default {QueryModal};","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\DeviceModal.js",["213","214","215","216","217"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Modal } from \"react-bootstrap\";\r\nimport { alertService, createDevice, getDeviceInfo, updateDeviceInfo, getGate, getProjects } from '../services/index.js';\r\n\r\nexport function DeviceModal(props) {\r\n    let {hide, gateID, toggleModal, success, deviceID, deviceTypes } = props;\r\n    const [validated, setValidated] = useState(false);\r\n    const [state, setState] = useState({});\r\n    const [dummy, setDummy] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [curProject, setCurProject] = useState(\"\");\r\n    const [gates, setGates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setValidated(false);\r\n    if(deviceID===null){\r\n      setState({\r\n        gateID,\r\n        deviceID: \"\",\r\n        deviceName: \"\",\r\n        deviceType: \"\",\r\n        deviceCarpark: \"\",\r\n        manufacturer: \"\",\r\n        manufacturerCode: \"\",\r\n        direction: \"\",\r\n        isPrimaryDevice: false,\r\n        isGateControl: false\r\n      });\r\n    }else{\r\n      getDeviceInfo(deviceID)\r\n      .then(async (data) => {\r\n        console.log(data.message);\r\n        setState(data.message);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"Get Device, There was an error!\", error);\r\n      });\r\n      if(gateID===null){\r\n        handleChange({\r\n          target:{\r\n            id: \"gateID\",\r\n            value: \"\"\r\n          }\r\n        });\r\n        getProjects([\"projectID\",\"projectName\"])\r\n        .then(async (data) => {\r\n          setCurProject(\"\");\r\n          setProjects(data.content);\r\n        })\r\n        .catch((error) => {\r\n          alertService.error(\"There was an error!\");\r\n          console.error(\"Get Projects, There was an error!\", error);\r\n        });\r\n      }\r\n    }\r\n  }, [dummy,hide]);\r\n\r\n  useEffect(()=>{\r\n    handleChange({\r\n      target:{\r\n        id: \"gateID\",\r\n        value: \"\"\r\n      }\r\n    });\r\n    if(curProject === null)setGates([]);\r\n    else{\r\n      getGate(curProject,[\"gateID\",\"gateName\"])\r\n      .then(async (data) => {\r\n        setGates(data.content);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"Get Gates, There was an error!\", error);\r\n      });\r\n    }\r\n  },[curProject])\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    if (typeof state[id] === \"boolean\") {\r\n        console.log(\"bool\");\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if (form.checkValidity()){\r\n      if(deviceID===null) create();\r\n      else update();\r\n    }\r\n  };\r\n\r\n  const update = () => {\r\n    let tempState = state;\r\n    delete tempState[\"deviceStatus\"];\r\n    updateDeviceInfo(deviceID, tempState)\r\n    .then(async (data) => {\r\n        setValidated(false);\r\n        alertService.success(\"Update Successful!\");\r\n        success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Update Device, There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  const create = () =>{\r\n    createDevice(gateID, state)\r\n    .then(async (data) => {\r\n        setValidated(false);\r\n      alertService.success(\"Addition Successful!\");\r\n      success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Add Device, There was an error!\", error);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal show={hide} onHide={()=>{\r\n    setValidated(false);\r\n    toggleModal();}}>\r\n            <Modal.Header\r\n             closeButton>\r\n                <Modal.Title>{deviceID===null?\"Add Device\":\"Edit Device\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Form id =\"deviceModal\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device ID\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >{deviceID===null?\r\n                        <div><Form.Control\r\n                        required\r\n                        placeholder=\"ID\"\r\n                        id=\"deviceID\"\r\n                        name=\"deviceID\"\r\n                        type =\"text\"\r\n                        value={state.deviceID}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device ID is a required field.\r\n                        </Form.Control.Feedback></div>:<Form.Control type=\"text\" placeholder={state.deviceID} readOnly />}\r\n                    </Col>\r\n                    </Form.Group>\r\n                    {gateID===null?\r\n                    <div>\r\n                      <Form.Group as={Row}>\r\n                        <Form.Label column sm={6}>\r\n                            Project\r\n                        </Form.Label>\r\n                        <Col\r\n                            sm={6}\r\n                        >\r\n                          <Form.Control\r\n                            custom\r\n                            required\r\n                            as=\"select\"\r\n                            id=\"project\"\r\n                            name=\"project\"\r\n                            value={curProject}\r\n                            onChange={(e)=>{\r\n                              setCurProject(e.target.value);\r\n                            }}\r\n                            >\r\n                            <option value={\"\"}>--Select Project--</option>\r\n                            {projects.map((project)=>(\r\n                              <option value={project.projectID}>{project.projectName}</option>\r\n                            ))}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            Project is a required field.\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group as={Row}>\r\n                        <Form.Label column sm={6}>\r\n                            Gate\r\n                        </Form.Label>\r\n                        <Col\r\n                            sm={6}\r\n                        >\r\n                          <Form.Control\r\n                            disabled = {curProject===\"\"}\r\n                            custom\r\n                            required\r\n                            as=\"select\"\r\n                            id=\"gateID\"\r\n                            name=\"gateID\"\r\n                            value={state.gateID===null?\"\":state.gateID}\r\n                            onChange={handleChange}\r\n                            >\r\n                            <option value={\"\"}>--Select Project--</option>\r\n                            {gates.map((gate)=>(\r\n                              <option value={gate.gateID}>{gate.gateName}</option>\r\n                            ))}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type=\"invalid\">\r\n                            Gate is a required field.\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                      </Form.Group>\r\n                      </div>\r\n                      :null\r\n                    }\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Name\"\r\n                        id=\"deviceName\"\r\n                        name=\"deviceName\"\r\n                        value={state.deviceName}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device Name is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device Type\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        custom\r\n                        required\r\n                        as=\"select\"\r\n                        id=\"deviceType\"\r\n                        name=\"deviceType\"\r\n                        value={state.deviceType===null?null:state.deviceType}\r\n                        onChange={handleChange}\r\n                        >\r\n                        <option value={\"\"}>--Select Type--</option>\r\n                        {deviceTypes.map((type)=>(\r\n                          <option value={type.id}>{type.name}</option>\r\n                        ))}\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device Type is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Carpark\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Carpark\"\r\n                        id=\"deviceCarpark\"\r\n                        name=\"deviceCarpark\"\r\n                        value={state.deviceCarpark}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Capark is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Manufacturer\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Manufacturer\"\r\n                        id=\"manufacturer\"\r\n                        name=\"manufacturer\"\r\n                        value={state.manufacturer}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Manufacturer is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Manufacturer Code\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Manufacturer Code\"\r\n                        id=\"manufacturerCode\"\r\n                        name=\"manufacturerCode\"\r\n                        value={state.manufacturerCode}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Manufacturer Code is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Direction\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Direction\"\r\n                        id=\"direction\"\r\n                        name=\"direction\"\r\n                        value={state.direction}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Direction is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Primary Device?\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isPrimaryDevice}\r\n                        type=\"switch\"\r\n                        id=\"isPrimaryDevice\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Control Gate?\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isGateControl}\r\n                        type=\"switch\"\r\n                        id=\"isGateControl\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                </div>\r\n            </Form>\r\n          </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=>{\r\n    setValidated(false);\r\n    toggleModal();}}>\r\n            Cancel\r\n          </Button>\r\n          <Button form =\"deviceModal\" variant=\"primary\" type=\"submit\">\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default { DeviceModal };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\alertService.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\AlertGroup.js",["218","219","220"],"import React from 'react';\r\n\r\nimport { alertService, alertType } from '../services/index.js';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport class AlertGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            alerts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // subscribe to new alert notifications\r\n        this.subscription = alertService.onAlert(this.props.id)\r\n            .subscribe(alert => {\r\n                // add alert to array\r\n                this.setState({ alerts: [...this.state.alerts, alert] });\r\n\r\n                // auto close alert if required\r\n                setTimeout(() => this.removeAlert(alert), 3000);\r\n            });\r\n\r\n        // clear alerts on location change\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // unsubscribe & unlisten to avoid memory leaks\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    removeAlert(alert) {\r\n        this.setState({ alerts: this.state.alerts.filter(x => x !== alert) })\r\n    }\r\n\r\n    render() {\r\n        const { alerts } = this.state;\r\n        if (!alerts.length) return null;\r\n        return (\r\n            <div className=\"alertGrp\">\r\n                {console.log(alerts),\r\n                alerts.map((alert,idx) =>\r\n                    <Alert \r\n                    key = {idx} \r\n                    variant={alert.type}\r\n                    dismissible = {true}\r\n                    onClose={()=>{this.removeAlert(alert)}}>\r\n                        {alert.message}\r\n                    </Alert>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default {AlertGroup} ;","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\api.js",["221"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\TablePaginationActions.js",["222"],"import {IconButton} from '@material-ui/core';\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nexport function TablePaginationActions(props) {\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div style={{flexShrink:0, right:0}}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        <FirstPageIcon />\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n         <KeyboardArrowLeft />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        <KeyboardArrowRight />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        <LastPageIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default {TablePaginationActions};","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\LedConfig.js",["223","224","225"],"import React, { useState, useEffect } from \"react\";\r\nimport { Breadcrumb } from \"react-bootstrap\";\r\nimport {Input , TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { TablePaginationActions } from \"../../components/index.js\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getProjectInfo, alertService} from '../../services/index.js';\r\n\r\nimport { PencilSquare } from \"react-bootstrap-icons\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nexport function LedConfig(props) {\r\n  let {projectID} = useParams();\r\n  const [rows, setRows] = useState([]);\r\n  const [curID, setCurID] = useState(null);\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [state, setState] = useState({\r\n    trigger: \"\",\r\n    voiceMsg: \"\",\r\n    textMsg: \"\"\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n  const reload = () =>{\r\n    getProjectInfo(projectID)\r\n    .then(async (data) => {\r\n      setProjectName(data.message.projectName);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"Get Project Info, there was an error!\", error);\r\n    });\r\n    /*getProjects([\"projectID\", \"projectName\", \"location\", \"projectType\"])\r\n    .then(async (data) => {\r\n      console.log(data.content);\r\n      setInitialRows(data.content);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n  }\r\n  useEffect(() => {\r\n    reload();\r\n    let res = [\r\n        {\r\n            id: 1,\r\n            trigger: \"Trigger 1\",\r\n            voiceMsg: \"Sample 1\",\r\n            textMsg: \"Sample 01\"\r\n        },\r\n        {\r\n            id: 2,\r\n            trigger: \"Trigger 2\",\r\n            voiceMsg: \"Sample 2\",\r\n            textMsg: \"Sample 02\"\r\n        },\r\n        {\r\n            id: 3,\r\n            trigger: \"Trigger 3\",\r\n            voiceMsg: \"Sample 3\",\r\n            textMsg: \"Sample 03\"\r\n        },\r\n        {\r\n            id: 4,\r\n            trigger: \"Trigger 4\",\r\n            voiceMsg: \"Sample 4\",\r\n            textMsg: \"Sample 04\"\r\n        },\r\n        {\r\n            id: 5,\r\n            trigger: \"Trigger 5\",\r\n            voiceMsg: \"Sample 5\",\r\n            textMsg: \"Sample 05\"\r\n        },\r\n        {\r\n            id: 6,\r\n            trigger: \"Trigger 6\",\r\n            voiceMsg: \"Sample 6\",\r\n            textMsg: \"Sample 06\"\r\n        }\r\n    ];\r\n    setRows(res);\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const save = () =>{\r\n    // API\r\n    //reload();\r\n  }\r\n\r\n  const edit = (vals) =>{\r\n    const {id, trigger, voiceMsg, textMsg} = vals;\r\n    setState({\r\n        trigger, \r\n        voiceMsg, \r\n        textMsg});\r\n    setCurID(id);\r\n  }\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setCurID(null);\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/project\">Projects</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>LED Configuration</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Breadcrumb>\r\n      <h5 style={{color:\"#6c757d\"}}>{projectName}</h5>\r\n      </Breadcrumb>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">Trigger</TableCell>\r\n                <TableCell align=\"center\">Voice Message</TableCell>\r\n                <TableCell align=\"center\">Text Message</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row) => (\r\n                <TableRow key={row.id}>\r\n                  <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.trigger}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {curID === row.id?\r\n                    <Input \r\n                        id=\"voiceMsg\" \r\n                        label=\"Standard\"\r\n                        value = {state.voiceMsg}\r\n                        onChange = {handleChange} />\r\n                    :row.voiceMsg\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {curID === row.id?\r\n                    <Input \r\n                        id=\"textMsg\" \r\n                        label=\"Standard\"\r\n                        value = {state.textMsg}\r\n                        onChange = {handleChange} />\r\n                    :row.textMsg\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell align=\"right\"  style={{padding:0}}>\r\n                    {curID === null?\r\n                        (<IconButton onClick={() => edit(row)}>\r\n                            <PencilSquare\r\n                            size={21}\r\n                            color=\"royalblue\"\r\n                            />\r\n                        </IconButton>)\r\n                        :(\r\n                        curID === row.id?\r\n                        <div>\r\n                            <IconButton onClick={() => save()}>\r\n                                <SaveIcon\r\n                                size={21}\r\n                                color=\"primary\"\r\n                                />\r\n                            </IconButton>\r\n                            <IconButton onClick={() => setCurID(null)}>\r\n                                <CloseIcon\r\n                                size={21}\r\n                                color=\"error\"\r\n                                />\r\n                            </IconButton>\r\n                        </div>\r\n                        :\r\n                        (<IconButton disabled = {true}>\r\n                            <PencilSquare\r\n                            size={21}\r\n                            />\r\n                        </IconButton>)\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                colSpan={4}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { LedConfig };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\PlateRegex.js",["226","227","228","229","230"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb, Modal } from \"react-bootstrap\";\r\nimport {TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { PencilSquare, Trash } from \"react-bootstrap-icons\";\r\nimport { ConfirmModal, TablePaginationActions } from \"../components/index.js\";\r\nimport {getProjects, \r\n  getSpecialPlate,\r\n  delSpecialPlate,\r\n  updateSpecialPlate,\r\n  addSpecialPlate } from '../services/index.js';\r\n\r\nexport function PlateRegex({ match }) {\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  const [curID, setCurID] = useState(\"\");\r\n  const [rows, setRows] = useState([]);\r\n  const [toggle, setToggle] = useState({\r\n    delete: false,\r\n    add: false,\r\n    edit: false\r\n  });\r\n  const [state, setState] = useState({\r\n    projectID: NaN,\r\n    actualPlate: \"\"\r\n  });\r\n  const [curState, setCurState] = useState({\r\n    projectID: NaN,\r\n    actualPlate: \"\"\r\n  });\r\n  const reset = () =>{\r\n    setState({\r\n      projectID: NaN,\r\n      actualPlate: \"\"\r\n    });\r\n    setCurState({\r\n      projectID: NaN,\r\n      actualPlate: \"\"\r\n    });\r\n  }\r\n  const [val, setVal] = useState({\r\n    projectID: NaN,\r\n    matchPlate: \"\",\r\n    actualPlate: \"\"\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n  const [projects, setProjects] = useState([]);\r\n  const [projectNames, setProjectNames] = useState({});\r\n  const reload = () =>{\r\n    getSpecialPlate([\"projectID\", \"matchPlate\", \"actualPlate\"])\r\n      .then(async (data) => {\r\n        console.log(data.content);\r\n        setInitialRows(data.content);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }\r\n  const func = async (val) =>{\r\n    let temp = {};\r\n    val.forEach(async (element)=>{\r\n      temp[element.projectID] = element.projectName;\r\n    });\r\n    return await temp;\r\n  };\r\n  useEffect(() => {\r\n    getProjects([\"projectID\", \"projectName\"])\r\n    .then(async (data) => {\r\n      setProjects(data.content);\r\n      func(data.content).then(async(list)=>{\r\n        setProjectNames(await list);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  }, [dummy]);\r\n\r\n  useEffect(()=>{\r\n    reload();\r\n  },projectNames);\r\n\r\n  useEffect(() => {\r\n    filter();\r\n  }, [initialRows, curState]);\r\n\r\n  const handleChange = (e) => {\r\n    let { id, value } = e.target;\r\n    if(id===\"projectID\")value = parseInt(value);\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const handleChangeVal = (e) =>{\r\n    let { id, value } = e.target;\r\n    if(id===\"projectID\")value = parseInt(value);\r\n    setVal((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  }\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  const activateModal = (values) => {\r\n    let {projectID, matchPlate, actualPlate} = values;\r\n    setValidated(false);\r\n    setVal({\r\n        projectID,\r\n        matchPlate,\r\n        actualPlate\r\n      });\r\n    toggleModal(\"edit\");\r\n  };\r\n\r\n  const filter = (e) => {\r\n    let { projectID, actualPlate } = curState;\r\n    let curRows = initialRows;\r\n    setRows(\r\n      curRows.filter(\r\n        (row) =>\r\n          (Number.isNaN(projectID) || row[\"projectID\"] === projectID) &&\r\n          String(row[\"actualPlate\"]).toLowerCase().indexOf(actualPlate.toLowerCase()) >= 0\r\n      )\r\n    );\r\n  };\r\n\r\n  const insert = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    console.log(form.checkValidity());\r\n    if (form.checkValidity()){\r\n      addSpecialPlate(val)\r\n      .then(async (data) => {\r\n        reload();\r\n        toggleModal(\"add\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n    }\r\n  };\r\n\r\n  const edit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    console.log(form.checkValidity());\r\n    if (form.checkValidity()){\r\n        updateSpecialPlate(val)\r\n        .then(async (data) => {\r\n          reload();\r\n          toggleModal(\"edit\");\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"There was an error!\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const del = (id) => {\r\n    delSpecialPlate(id)\r\n    .then(async (data) => {\r\n      reload();\r\n      toggleModal(\"delete\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delete}\r\n        success={() => {\r\n          del(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delete\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this regex?\"\r\n      />\r\n      <Modal show={toggle.add} onHide={()=>toggleModal(\"add\")}\r\n      centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Add Plate Regex Record</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form noValidate validated={validated} onSubmit={insert}>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={5}>\r\n            Project Name\r\n          </Form.Label>\r\n          <Col sm={6}>\r\n              <Form.Control\r\n                custom\r\n                required\r\n                as = \"select\"\r\n                id=\"projectID\"\r\n                placeholder=\"Name\"\r\n                onChange={handleChangeVal}\r\n                value={val.projectID}\r\n              >\r\n                  <option value={null}>--Select a Project--</option>\r\n                  {projects.map((project)=>(\r\n                      <option value={project.projectID}>{project.projectName}</option>\r\n                  ))}\r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Project Name is a required field.\r\n                </Form.Control.Feedback>\r\n            </Col>\r\n        </Form.Group>\r\n            <Form.Group as={Row}>\r\n            <Form.Label column sm={5}>\r\n                Regex for Plate\r\n            </Form.Label>\r\n            <Col\r\n                sm={6}\r\n            >\r\n                <Form.Control\r\n                required\r\n                placeholder=\"Regex\"\r\n                id=\"matchPlate\"\r\n                name=\"matchPlate\"\r\n                value={val.matchPlate}\r\n                onChange={handleChangeVal}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                Regex is a required field.\r\n                </Form.Control.Feedback>\r\n            </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n            <Form.Label column sm={5}>\r\n                Actual Plate\r\n            </Form.Label>\r\n            <Col\r\n                sm={6}\r\n            >\r\n                <Form.Control\r\n                required\r\n                placeholder=\"Actual Plate\"\r\n                id=\"actualPlate\"\r\n                name=\"actualPlate\"\r\n                value={val.actualPlate}\r\n                onChange={handleChangeVal}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                Actual Plate is a required field.\r\n                </Form.Control.Feedback>\r\n            </Col>\r\n            </Form.Group>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={()=>toggleModal(\"add\")}>\r\n                Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n    <Modal show={toggle.edit} onHide={()=>toggleModal(\"edit\")}\r\n      centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Edit Plate Regex Record</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form noValidate validated={validated} onSubmit={edit}>\r\n            <Form.Group as={Row}>\r\n            <Form.Label column sm={5}>\r\n                Regex for Plate\r\n            </Form.Label>\r\n            <Col\r\n                sm={6}\r\n            >\r\n                <Form.Control\r\n                required\r\n                placeholder=\"Regex\"\r\n                id=\"matchPlate\"\r\n                name=\"matchPlate\"\r\n                value={val.matchPlate}\r\n                onChange={handleChangeVal}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                Regex is a required field.\r\n                </Form.Control.Feedback>\r\n            </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n            <Form.Label column sm={5}>\r\n                Actual Plate\r\n            </Form.Label>\r\n            <Col\r\n                sm={6}\r\n            >\r\n                <Form.Control\r\n                required\r\n                placeholder=\"Actual Plate\"\r\n                id=\"actualPlate\"\r\n                name=\"actualPlate\"\r\n                value={val.actualPlate}\r\n                onChange={handleChangeVal}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                Actual Plate is a required field.\r\n                </Form.Control.Feedback>\r\n            </Col>\r\n            </Form.Group>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={()=>toggleModal(\"edit\")}>\r\n                Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Plate Regex</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n        <Form inline className=\"rightFlex\" onSubmit={(e)=>{e.preventDefault();}}>\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                custom\r\n                as = \"select\"\r\n                id=\"projectID\"\r\n                placeholder=\"Name\"\r\n                onChange={handleChange}\r\n                value={state.projectID}\r\n              >\r\n                  <option value={null}>All Projects</option>\r\n                  {projects.map((project)=>(\r\n                      <option value={project.projectID}>{project.projectName}</option>\r\n                  ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"actualPlate\"\r\n                placeholder=\"Actual Plate\"\r\n                onChange={handleChange}\r\n                value={state.actualPlate}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" onClick={()=>{setCurState(state)}}>\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" variant=\"secondary\" onClick={reset}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button\r\n                className=\"btn btn-success\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                setVal({\r\n                    projectID: \"\",\r\n                    matchPlate: \"\",\r\n                    actualPlate: \"\"\r\n                    });\r\n                  setValidated(false);\r\n                  toggleModal(\"add\");\r\n                }}\r\n              >\r\n                Add +\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">Project</TableCell>\r\n                <TableCell align=\"center\">Regex of Plate</TableCell>\r\n                <TableCell align=\"center\">Actual Plate</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row) => (\r\n                <TableRow key={row.matchPlate}>\r\n                  <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                    {projectNames[row.projectID]}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <div className=\"outerPlate\" >\r\n                      <div className=\"innerPlate\">\r\n                        <u>{row.matchPlate}</u>\r\n                      </div>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <div className=\"outerPlate\" >\r\n                      <div className=\"innerPlate\">\r\n                        <u>{row.actualPlate}</u>\r\n                      </div>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\" style={{padding:0}}>\r\n                    <IconButton onClick={() => {activateModal(row)}}>\r\n                      <PencilSquare\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => {\r\n                        setCurID(row.matchPlate);\r\n                        toggleModal(\"delete\");\r\n                    }}>\r\n                      <Trash color=\"red\" size={21} />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                colSpan={4}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { PlateRegex };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Records.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport {TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { ImageModal, TablePaginationActions } from \"../components/index.js\";\r\nimport {getMovementLogs, getObjectTypes, alertService } from '../services/index.js';\r\nimport { LockFill, UnlockFill } from \"react-bootstrap-icons\";\r\n\r\nimport DatePicker from 'react-datepicker';\r\n\r\nexport function Records({ match }) {\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const [gateTypes, setGateTypes] = useState({});\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const  queryFields = [\r\n    \"projectName\",\r\n    \"vehicleType\",\r\n    \"gateName\",\r\n    \"gateType\",\r\n    \"originalPlate\",\r\n    \"confirmedPlate\"\r\n  ];\r\n  const fieldPlaceholder = {\r\n    projectName: \"Project Name\",\r\n    vehicleType: \"Vehicle Type\",\r\n    isOpened: \"Is Opened\",\r\n    gateName: \"Gate Name\",\r\n    gateType: \"Gate Type\",\r\n    originalPlate: \"Original Plate\",\r\n    confirmedPlate: \"Actual Plate\",\r\n    detectionTime: \"Detection Time\",\r\n    confirmedTime: \"Confirmed Time\",\r\n    image1: \"Image 1\",\r\n    image2: \"Image 2\",\r\n    image3: \"Image 3\",\r\n    plateImage: \"Plate Image\"\r\n  };\r\n  const fields = [\r\n    \"projectName\",\r\n    \"vehicleType\",\r\n    \"isOpened\",\r\n    \"gateName\",\r\n    \"gateType\",\r\n    \"detectionTime\",\r\n    \"confirmedTime\",\r\n    \"originalPlate\",\r\n    \"confirmedPlate\",\r\n    \"image1\",\r\n    \"image2\",\r\n    \"image3\",\r\n    \"plateImage\"\r\n  ];\r\n  const fieldLength = {\r\n    projectName: \"120px\",\r\n    vehicleType: \"120px\",\r\n    isOpened: \"120px\",\r\n    gateName: \"120px\",\r\n    gateType: \"120px\",\r\n    originalPlate: \"120px\",\r\n    confirmedPlate: \"120px\",\r\n    detectionTime: \"230px\",\r\n    confirmedTime: \"230px\",\r\n    image1: \"90px\",\r\n    image2: \"90px\",\r\n    image3: \"90px\",\r\n    plateImage: \"90px\"\r\n  };\r\n  const fieldHeight = {\r\n    image1: \"50px\",\r\n    image2: \"50px\",\r\n    image3: \"50px\",\r\n    plateImage: \"50px\",\r\n    isOpened: \"30px\"\r\n  }\r\n  const [state, setState] = useState({\r\n    curField: \"projectName\",\r\n    val: \"\",\r\n    startTime: null,\r\n    endTime: null\r\n  });\r\n  const [curState, setCurState] = useState({\r\n    curField: \"projectName\",\r\n    val: \"\",\r\n    startTime: null,\r\n    endTime: null\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n  const [projects, setProjects] = useState([]);\r\n  const reload = () =>{\r\n    getMovementLogs(fields.concat(\"logID\"), [])\r\n      .then(async (data) => {\r\n        console.log(data.content.slice(0,6));\r\n        setInitialRows(data.content);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    reload();\r\n    getObjectTypes(\"gate\")\r\n    .then(async (data) => {\r\n      setGateTypes(data.message);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error Get Gate Types!\", error);\r\n    });\r\n  }, [dummy]);\r\n\r\n  useEffect(() => {\r\n    filter();\r\n  }, [initialRows, curState]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    if(id===\"curField\"){\r\n      setState((prevState) => ({\r\n        curField: value,\r\n        val: \"\"\r\n      }));\r\n    }else{\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const filter = (e) => {\r\n    let { curField, val } = curState;\r\n    let curRows = initialRows;\r\n    setRows(\r\n      curRows.filter(\r\n        (row) =>\r\n          row[curField].toLowerCase().indexOf(val.toLowerCase()) >= 0 \r\n      ).sort(\r\n        (a,b)=> (a.detectionTime < b.detectionTime) ? 1 : -1\r\n      )\r\n    );\r\n  };\r\n  \r\n  const reset = async (e) =>{\r\n    setState({\r\n      curField: \"projectName\",\r\n      val: \"\",\r\n      startTime: null,\r\n      endTime: null\r\n    });\r\n    setCurState({\r\n      curField: \"projectName\",\r\n      val: \"\",\r\n      startTime: null,\r\n      endTime: null\r\n    });\r\n  }\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ImageModal\r\n      src = {imageSrc}\r\n      toggleModal={()=>{\r\n        setImageSrc(null);\r\n      }}\r\n      />\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Entry Exit Records</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n        <Form inline className=\"rightFlex\" onSubmit={(e)=>{e.preventDefault();}}>\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                custom\r\n                as = \"select\"\r\n                id=\"curField\"\r\n                onChange={handleChange}\r\n                value={state.curField}\r\n              >\r\n                  {queryFields.map((queryField)=>(\r\n                      <option value={queryField}>{fieldPlaceholder[queryField]}</option>\r\n                  ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"val\"\r\n                placeholder={fieldPlaceholder[state.curField]}\r\n                onChange={handleChange}\r\n                value={state.val}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"d-flex\">\r\n            <Form.Label>From:</Form.Label>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n            <DatePicker\r\n            isClearable\r\n              className=\"dateRecord\"\r\n              selected={state.startTime}\r\n              maxDate={state.endTime}\r\n              popperClassName=\"dateTimePopper\"\r\n              className=\"form-control\"\r\n              placeholderText=\"YYYY-MM-DD HH:MM:SS\"\r\n              onChange={date => {handleChange({\r\n                target:{\r\n                  value:date,\r\n                  id: \"startTime\"\r\n                }\r\n              });\r\n            console.log(date);\r\n              }}\r\n              showTimeSelect\r\n              dateFormat=\"yyyy-MM-dd\"\r\n              timeFormat=\"HH:mm:ss\"\r\n              timeIntervals={15}\r\n              timeCaption=\"time\"\r\n              dateFormat=\"yyyy-MM-dd HH:mm:ss\"\r\n              title=\"Start Time\"\r\n              clearButtonClassName=\"dateTimeClear\"\r\n            />\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"d-flex\">\r\n            <Form.Label>To:</Form.Label>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n            <DatePicker\r\n            isClearable\r\n              className=\"dateRecord\"\r\n              selected={state.endTime}\r\n              minDate={state.startTime}\r\n              popperClassName=\"dateTimePopper\"\r\n              className=\"form-control\"\r\n              placeholderText=\"YYYY-MM-DD HH:MM:SS\"\r\n              onChange={date => handleChange({\r\n                target:{\r\n                  value:date,\r\n                  id: \"endTime\"\r\n                }\r\n              })}\r\n              showTimeSelect\r\n              dateFormat=\"yyyy-MM-dd\"\r\n              timeFormat=\"HH:mm:ss\"\r\n              timeIntervals={15}\r\n              timeCaption=\"time\"\r\n              dateFormat=\"yyyy-MM-dd HH:mm:ss\"\r\n              title=\"Start Time\"\r\n              clearButtonClassName=\"dateTimeClear\"\r\n            />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" onClick={()=>{setCurState(state)}}>\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" variant=\"secondary\" onClick={reset}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper} className=\"overflowTable scrollbar-grey\">\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {fields.map((field) =>(\r\n                  <TableCell align=\"center\" style={{\"min-width\":fieldLength[field]}}>{fieldPlaceholder[field]}</TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row) => (\r\n                <TableRow key={row.logID}>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.projectName}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.vehicleType}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.isOpened === true?\r\n                    <UnlockFill color=\"#64D381\" size={25} />:\r\n                    <LockFill color=\"red\" size={25} />}\r\n            </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.gateName}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.gateType===null?null: (gateTypes[row.gateType]===undefined? null: gateTypes[row.gateType].name)}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.detectionTime}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" component=\"th\" scope=\"row\" align=\"center\">\r\n                    {row.confirmedTime}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    <div className=\"outerPlate\" >\r\n                      <div className=\"innerPlate\">\r\n                        <u>{row.originalPlate}</u>\r\n                      </div>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    {row.confirmedPlate===null?null:\r\n                    <div className=\"outerPlate\" >\r\n                      <div className=\"innerPlate\">\r\n                        <u>{row.confirmedPlate}</u>\r\n                      </div>\r\n                    </div>}\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    <img \r\n                    className=\"imageClick\"\r\n                    onClick = {()=>setImageSrc(row.image1)} \r\n                    style={{\"height\":fieldHeight.image1}} \r\n                    src={row.image1}/>\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    <img \r\n                    className=\"imageClick\"\r\n                    onClick = {()=>setImageSrc(row.image2)} \r\n                    style={{\"height\":fieldHeight.image2}} \r\n                    src={row.image2} />\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    <img \r\n                    className=\"imageClick\"\r\n                    onClick = {()=>setImageSrc(row.image3)} \r\n                    style={{\"height\":fieldHeight.image3}} \r\n                    src={row.image3} />\r\n                  </TableCell>\r\n                  <TableCell className=\"padding-0\" align=\"center\">\r\n                    <img \r\n                    className=\"imageClick\"\r\n                    onClick = {()=>setImageSrc(row.plateImage)} \r\n                    style={{\"height\":fieldHeight.plateImage}} \r\n                    src={row.plateImage} />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TableRow className=\"d-flex justify-content-center\">\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 50]}\r\n              colSpan={13}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n        </TableRow>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Records };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\ParkRecords.js",["249","250","251"],"import React, { useState, useEffect } from \"react\";\r\n\r\nexport function ParkRecords({ match }) {\r\n  return (<div className=\"d-flex justify-content-center\"><h1>Pending API</h1></div>);\r\n}\r\n\r\nexport default { ParkRecords };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\ParkingRules.js",["252","253","254","255","256","257","258","259","260","261","262","263","264"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport {Tooltip, TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { PencilSquare, Trash, Cpu } from \"react-bootstrap-icons\";\r\n\r\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\r\nimport { ConfirmModal, RulesModal, TablePaginationActions } from \"../components/index.js\";\r\nimport {getGate, alertService, delGate, getProjects, getAccessRule, delAccessRule} from '../services/index.js';\r\nimport { Directions, MonetizationOn } from \"@material-ui/icons\";\r\nimport MoneyOffIcon from '@material-ui/icons/MoneyOff';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\n\r\nexport function ParkingRules (){\r\n  const [rows, setRows] = useState([]);\r\n  const [toggle, setToggle] = useState({\r\n    delete: false,\r\n    edit: false\r\n  });\r\n  const [project,setProject] = useState(\"\");\r\n  const [curID, setCurID] = useState(\"\");\r\n  const [dummy, setDummy] = useState(false);\r\n  const [projectNames, setProjectNames] = useState({});\r\n  const [gateNames, setGateNames] = useState({});\r\n  const [projects,setProjects] = useState([]);\r\n  const func = async (val, inputField, outputField) =>{\r\n    let temp = {};\r\n    val.forEach(async (element)=>{\r\n      temp[element[inputField]] = element[outputField];\r\n    });\r\n    return await temp;\r\n  };\r\n  const reloadProjects = () =>{\r\n    getProjects([\"projectID\", \"projectName\"])\r\n      .then(async (data) => {\r\n        console.log(data.content);\r\n        setProjects(data.content);\r\n        func(data.content, \"projectID\", \"projectName\").then(async(list)=>{\r\n          setProjectNames(await list);\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Get Gate, there was an error!\", error);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    reloadProjects();\r\n  }, [dummy]);\r\n\r\n  const reload = () =>{\r\n    getAccessRule(project, [\"accessRuleID\", \"accessRuleName\", \"isChargeable\", \"gates\"])\r\n    .then(async (data) => {\r\n      console.log(data.content);\r\n      setRows(data.content);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Get Gate, there was an error!\", error);\r\n    });\r\n  }\r\n\r\n  const reloadGates = () =>{\r\n    getGate(project,[\"gateID\",\"gateName\"])\r\n      .then(async (data) => {\r\n        func(data.content, \"gateID\", \"gateName\").then(async(list)=>{\r\n          setGateNames(await list);\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Get Gate, there was an error!\", error);\r\n      });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    reload();\r\n    reloadGates();\r\n  },[project]);\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  const del = async (accessRuleID) => {\r\n    delAccessRule(accessRuleID)\r\n    .then(async (data) => {\r\n      reload();\r\n      toggleModal(\"delete\");\r\n      alertService.success(\"Rule Deleted\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Delete Rule, There was an error!\", error);\r\n    });\r\n  };\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delete}\r\n        success={() => {\r\n          del(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delete\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this rule?\"\r\n      />\r\n      {toggle.edit?\r\n      <RulesModal\r\n        hide={toggle.edit}\r\n        projectID = {project}\r\n        projectName = {projectNames[project]}\r\n        accessRuleID = {curID}\r\n        success={() => {\r\n            reload();\r\n            toggleModal(\"edit\");\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"edit\");\r\n        }}\r\n      />:null}\r\n\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Access Rules</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n        <Form inline onSubmit={(e)=>{e.preventDefault();}}>\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                custom\r\n                as = \"select\"\r\n                id=\"projectID\"\r\n                onChange={(e)=>{\r\n                  setProject(e.target.value);\r\n                }}\r\n                value={project}\r\n              >\r\n                <option value=\"\">--Select a Project--</option>\r\n                  {projects.map((val)=>(\r\n                      <option value={val.projectID}>{val.projectName}</option>\r\n                  ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button\r\n              disabled={project===\"\"}\r\n                className=\"btn btn-success\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setCurID(null);\r\n                  toggleModal(\"edit\");\r\n                }}\r\n              >\r\n                + Add\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell align=\"left\"><b>Project</b></TableCell>\r\n                <TableCell align=\"center\"><b>Name</b></TableCell>\r\n                <TableCell align=\"center\"><b>Gates</b></TableCell>\r\n                <TableCell align=\"center\"><b>Chargeable</b></TableCell>\r\n                <TableCell align=\"right\"><b>Actions</b></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row, index) => (\r\n                <TableRow key={row.gateName}>\r\n                <TableCell align=\"left\">{projectNames[project]}</TableCell>\r\n                  <TableCell align=\"center\">{row.accessRuleName}</TableCell>\r\n                  <TableCell align=\"center\">{row.gates===null?null:((row.gates).map((gate)=>(\r\n                    <div>{gate===null?null:gateNames[gate]} <br/></div> \r\n                  )))}</TableCell>\r\n                  <TableCell align=\"center\">{row.isChargeable?\r\n                  <AttachMoneyIcon style={{color:\"#66bb6a\"}}/>\r\n                  :<MoneyOffIcon style={{color:\"red\"}}/>\r\n                  }</TableCell>\r\n                  <TableCell align=\"right\" style={{padding:0}}>\r\n                    <IconButton onClick={() => {\r\n                        setCurID(row.accessRuleID);\r\n                        toggleModal(\"edit\");\r\n                    }}>\r\n                      <PencilSquare\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => {\r\n                        setCurID(row.accessRuleID);\r\n                        toggleModal(\"delete\");\r\n                    }}>\r\n                      <Trash color=\"red\" size={21} />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                colSpan={4}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { ParkingRules };","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Gates.js",["265","266","267","268","269","270"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport {Tooltip, TableFooter, TablePagination, TableContainer, TableCell, TableBody, Table, IconButton, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport { PencilSquare, Trash, Cpu, Unlock } from \"react-bootstrap-icons\";\r\n\r\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\r\nimport { ConfirmModal, GateModal, TablePaginationActions } from \"../../components/index.js\";\r\nimport {getGate, alertService, delGate, getObjectTypes, openGate, getProjectInfo, getProjects} from '../../services/index.js';\r\nimport { Directions } from \"@material-ui/icons\";\r\n\r\nexport function Gates (){\r\n    let { projectID }= useParams();\r\n    let history = useHistory();\r\n    let {pathname} = useLocation();\r\n  const [rows, setRows] = useState([]);\r\n  const [gateTypes, setGateTypes] = useState([]);\r\n  const [gateTypeNames, setGateTypeNames] = useState([]);\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [toggle, setToggle] = useState({\r\n    delete: false,\r\n    edit: false\r\n  });\r\n  const [modal, setModal] = useState(true);\r\n  const [curID, setCurID] = useState(\"\");\r\n  const [dummy, setDummy] = useState(false);\r\n  const reload = () =>{\r\n    getProjectInfo(projectID)\r\n    .then(async (data) => {\r\n      setProjectName(data.message.projectName);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"Get Project Info, there was an error!\", error);\r\n    });\r\n    getGate(projectID, [\"gateID\", \"gateName\", \"gateType\"])\r\n    .then(async (data) => {\r\n      console.log(data.content);\r\n      setRows(data.content);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"Get Gate, there was an error!\", error);\r\n    });\r\n    getObjectTypes(\"gate\")\r\n    .then(async (data) => {\r\n      setGateTypeNames(data.message);\r\n      setGateTypes(Object.entries(data.message).map((type)=>({\r\n        id: type[0],\r\n        name: type[1].name\r\n      })));\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error Get Gate Types!\", error);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    reload();\r\n  }, [dummy]);\r\n\r\n  const openGateFunc = (gateID, gateName) =>{\r\n    openGate(gateID)\r\n    .then(async (data) => {\r\n      alertService.success(\"Opened Gate \"+gateName);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error Open Gate!\", error);\r\n    });\r\n  }\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  const devices = (gateID) => {\r\n    history.push(pathname +\"/\"+ String(gateID));\r\n  };\r\n\r\n  const del = async (gateID) => {\r\n    delGate(gateID)\r\n    .then(async (data) => {\r\n      reload();\r\n      toggleModal(\"delete\");\r\n      alertService.success(\"Gate Deleted\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Delete Gate, There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  \r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delete}\r\n        success={() => {\r\n          del(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delete\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this gate?\"\r\n      />\r\n      <GateModal\r\n        gateTypes = {gateTypes}\r\n        hide={toggle.edit}\r\n        gateID = {curID}\r\n        newState = {modal}\r\n        projectID = {projectID}\r\n        success={() => {\r\n            reload();\r\n            toggleModal(\"edit\");\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"edit\");\r\n        }}\r\n      />\r\n\r\n      <div className=\"content\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/home\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/project\">Projects</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Gates</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"d-flex align-items-center\">\r\n      <h5 style={{color:\"#6c757d\"}}>{projectName}</h5>\r\n      <div style={{\"flex-grow\":\"1\"}}></div>\r\n        <Form inline onSubmit={(e)=>{e.preventDefault();}}>\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Button\r\n                className=\"btn btn-success\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    setModal(true);\r\n                  toggleModal(\"edit\");\r\n                }}\r\n              >\r\n                + Add\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        </div>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead >\r\n              <TableRow>\r\n                <TableCell align=\"left\"><b>ID</b></TableCell>\r\n                <TableCell align=\"center\"><b>Name</b></TableCell>\r\n                <TableCell align=\"center\"><b>Type</b></TableCell>\r\n                <TableCell align=\"right\"><b>Actions</b></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows).map((row, index) => (\r\n                <TableRow key={row.gateName}>\r\n                <TableCell align=\"left\">{row.gateID}</TableCell>\r\n                  <TableCell align=\"center\">{row.gateName}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                  {row.gateType===null?null: (gateTypeNames[row.gateType]===undefined? null: gateTypeNames[row.gateType].name)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\" style={{padding:0}}>\r\n                  <Tooltip title=\"Devices\">\r\n                    <IconButton \r\n                    style={{padding:\"5px 10px\"}}\r\n                    onClick={() => {\r\n                        devices(row.gateID);\r\n                    }}>\r\n                      <Cpu\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n                  <Tooltip title=\"Edit\">\r\n                    <IconButton\r\n                    style={{padding:\"5px 10px\"}}\r\n                     onClick={() => {\r\n                        setCurID(row.gateID);\r\n                        setModal(false);\r\n                        toggleModal(\"edit\");\r\n                    }}>\r\n                      <PencilSquare\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Open Gate\">\r\n                    <IconButton\r\n                    style={{padding:\"5px 10px\"}}\r\n                     onClick={() => {\r\n                        openGateFunc(row.gateID, row.gateName);\r\n                    }}>\r\n                      <Unlock\r\n                        size={21}\r\n                        color=\"green\"\r\n                      />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n                  <Tooltip title=\"Delete\">\r\n                    <IconButton\r\n                    style={{padding:\"5px 10px\"}}\r\n                     onClick={() => {\r\n                        setCurID(row.gateID);\r\n                        toggleModal(\"delete\");\r\n                    }}>\r\n                      <Trash color=\"red\" size={21} />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                colSpan={4}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Gates };","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\RulesModal.js",["271","272","273","274","275","276","277","278","279"],"import { func } from \"prop-types\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Modal, Spinner } from \"react-bootstrap\";\r\nimport { alertService, createAccessRule, getAccessRuleInfo, updateAccessRuleInfo, getGate } from '../services/index.js';\r\n\r\nexport function RulesModal(props) {\r\n    let {hide, accessRuleID, projectID, success, projectName, toggleModal } = props;\r\n    let cnt = 0;\r\n    const [validated, setValidated] = useState(false);\r\n    const [state, setState] = useState({});\r\n    const [dummy, setDummy] = useState(false);\r\n    const [gates, setGates] = useState([]);\r\n    const [curGates, setCurGates] = useState({});\r\n    const [initialGates, setInitialGates] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const func = async (val) =>{\r\n        let temp = {};\r\n        val.forEach(async (element)=>{\r\n            temp[element[\"gateID\"]] = false;\r\n        });\r\n        initialGates.forEach(async (element)=>{\r\n            console.log(element);\r\n            temp[element] = true;\r\n        });\r\n        return await temp;\r\n    };\r\n    const loadGates = () =>{\r\n        getGate(projectID, [\"gateID\", \"gateName\"])\r\n        .then(async (data) => {\r\n            setGates(data.content);\r\n            func(data.content).then(async(list)=>{\r\n                setCurGates(await list);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            alertService.error(\"There was an error!\");\r\n            console.error(\"Get Gate Rule, There was an error!\", error);\r\n        });\r\n    }\r\n  useEffect(() => {\r\n    setValidated(false);\r\n    setTimeout(()=>setLoading(false), 600);\r\n    if(accessRuleID===null){\r\n      setState({\r\n        projectID,\r\n        accessRuleName: \"\",\r\n        isChargeable: false,\r\n        gates: []\r\n      });\r\n      setInitialGates([]);\r\n    }else{\r\n      getAccessRuleInfo(accessRuleID)\r\n      .then(async (data) => {\r\n        setState(data.message);\r\n        setInitialGates(data.message.gates);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"Get Access Rule, There was an error!\", error);\r\n      });\r\n    }\r\n  }, [dummy]);\r\n\r\n  useEffect(()=>{\r\n    setState((prevState)=>({\r\n        ...prevState,\r\n        gates: (Object.keys(curGates)).filter((gate)=>curGates[gate])\r\n      }));\r\n  },[curGates]);\r\n\r\n  useEffect(()=>{\r\n    loadGates();\r\n  },[initialGates]);\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    if (typeof state[id] === \"boolean\") {\r\n        console.log(\"bool\");\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleGateChange = (e) =>{\r\n    let id = e.target.id;\r\n    setCurGates((prevState) => ({\r\n      ...prevState,\r\n      [id]: !prevState[id]\r\n    }));\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if (form.checkValidity()){\r\n      if(accessRuleID===null) create();\r\n      else update();\r\n    }\r\n  };\r\n\r\n  const update = () => {\r\n    updateAccessRuleInfo(accessRuleID, state)\r\n    .then(async (data) => {\r\n        setValidated(false);\r\n        alertService.success(\"Update Successful!\");\r\n        success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Update Access Rule, There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  const create = () =>{\r\n    createAccessRule(state)\r\n    .then(async (data) => {\r\n        setValidated(false);\r\n      alertService.success(\"Addition Successful!\");\r\n      success();\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"Add Access Rule, There was an error!\", error);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal show={hide} onHide={()=>{\r\n    setValidated(false);\r\n    toggleModal();}}>\r\n      {loading?\r\n      <Row className=\"d-flex justify-content-center\" style={{margin:\"200px\"}}>\r\n      <Spinner size=\"lg\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </Spinner>\r\n    </Row>:\r\n        <div>\r\n            <Modal.Header\r\n             closeButton>\r\n                <Modal.Title>{accessRuleID===null?\"Add Rule\":\"Edit Rule\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Form id =\"ruleModal\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Project Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Control type=\"text\" placeholder={projectName} readOnly />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Access Rule Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Name\"\r\n                        id=\"accessRuleName\"\r\n                        name=\"accessRuleName\"\r\n                        value={state.accessRuleName}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Rule Name is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gates\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        {gates.map((gate, index)=>(\r\n                            <div>{\r\n                                index%2==0?\r\n                            <Form.Check \r\n                                custom\r\n                                type={'checkbox'}\r\n                                id={gate.gateID}\r\n                                checked={curGates[gate.gateID]}\r\n                                onChange={handleGateChange}\r\n                                label={gate.gateName}\r\n                            />:null\r\n                            }</div>\r\n                        ))}\r\n                    </Col>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        {gates.map((gate, index)=>(\r\n                            <div>{\r\n                                index%2==1?\r\n                            <Form.Check \r\n                                custom\r\n                                type={'checkbox'}\r\n                                id={gate.gateID}\r\n                                checked={curGates[gate.gateID]}\r\n                                onChange={handleGateChange}\r\n                                label={gate.gateName}\r\n                            />:null\r\n                            }</div>\r\n                        ))}\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Is Chargeable\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isChargeable}\r\n                        type=\"switch\"\r\n                        id=\"isChargeable\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                </div>\r\n            </Form>\r\n          </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={()=>{\r\n    setValidated(false);\r\n    toggleModal();}}>\r\n            Cancel\r\n          </Button>\r\n          <Button form =\"ruleModal\" variant=\"primary\" type=\"submit\">\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n        </div>\r\n      }\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default { RulesModal };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ImageModal.js",["280","281"],"import {Modal} from 'react-bootstrap';\r\n\r\nexport function ImageModal (props){\r\n    let {toggleModal, src} = props;\r\n    return(\r\n    <Modal size=\"lg\" centered show={src===null?false:true} onHide={toggleModal}>\r\n        <img src={src}/>\r\n    </Modal>\r\n    );\r\n}\r\n\r\nexport default {ImageModal};","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Whitelist.js",["282","283","284","285","286","287","288","289","290","291","292","293"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\WhitelistModal.js",["294","295","296","297","298","299","300"],{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","severity":1,"message":"306","line":18,"column":7,"nodeType":"307","messageId":"308","endLine":18,"endColumn":18},{"ruleId":"305","severity":1,"message":"309","line":12,"column":22,"nodeType":"307","messageId":"308","endLine":12,"endColumn":30},{"ruleId":"305","severity":1,"message":"310","line":18,"column":8,"nodeType":"307","messageId":"308","endLine":18,"endColumn":20},{"ruleId":"311","severity":1,"message":"312","line":164,"column":1,"nodeType":"313","endLine":164,"endColumn":27},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"315","line":40,"column":17,"nodeType":"307","messageId":"308","endLine":40,"endColumn":25},{"ruleId":"316","severity":1,"message":"317","line":57,"column":6,"nodeType":"318","endLine":57,"endColumn":29,"suggestions":"319"},{"ruleId":"311","severity":1,"message":"312","line":282,"column":1,"nodeType":"313","endLine":282,"endColumn":29},{"ruleId":"305","severity":1,"message":"320","line":6,"column":9,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"311","severity":1,"message":"312","line":133,"column":1,"nodeType":"313","endLine":133,"endColumn":26},{"ruleId":"305","severity":1,"message":"321","line":11,"column":20,"nodeType":"307","messageId":"308","endLine":11,"endColumn":26},{"ruleId":"305","severity":1,"message":"322","line":19,"column":10,"nodeType":"307","messageId":"308","endLine":19,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":76,"column":1,"nodeType":"313","endLine":76,"endColumn":32},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"323","line":4,"column":35,"nodeType":"307","messageId":"308","endLine":4,"endColumn":46},{"ruleId":"305","severity":1,"message":"324","line":4,"column":48,"nodeType":"307","messageId":"308","endLine":4,"endColumn":63},{"ruleId":"305","severity":1,"message":"325","line":4,"column":138,"nodeType":"307","messageId":"308","endLine":4,"endColumn":149},{"ruleId":"305","severity":1,"message":"326","line":6,"column":10,"nodeType":"307","messageId":"308","endLine":6,"endColumn":32},{"ruleId":"305","severity":1,"message":"327","line":9,"column":10,"nodeType":"307","messageId":"308","endLine":9,"endColumn":20},{"ruleId":"305","severity":1,"message":"328","line":14,"column":10,"nodeType":"307","messageId":"308","endLine":14,"endColumn":14},{"ruleId":"305","severity":1,"message":"329","line":14,"column":16,"nodeType":"307","messageId":"308","endLine":14,"endColumn":23},{"ruleId":"305","severity":1,"message":"315","line":15,"column":17,"nodeType":"307","messageId":"308","endLine":15,"endColumn":25},{"ruleId":"330","severity":1,"message":"331","line":180,"column":57,"nodeType":"332","messageId":"333","endLine":180,"endColumn":59},{"ruleId":"330","severity":1,"message":"331","line":220,"column":57,"nodeType":"332","messageId":"333","endLine":220,"endColumn":59},{"ruleId":"311","severity":1,"message":"312","line":243,"column":1,"nodeType":"313","endLine":243,"endColumn":25},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"334","line":4,"column":31,"nodeType":"307","messageId":"308","endLine":4,"endColumn":34},{"ruleId":"305","severity":1,"message":"327","line":9,"column":10,"nodeType":"307","messageId":"308","endLine":9,"endColumn":20},{"ruleId":"305","severity":1,"message":"335","line":15,"column":9,"nodeType":"307","messageId":"308","endLine":15,"endColumn":16},{"ruleId":"305","severity":1,"message":"336","line":16,"column":10,"nodeType":"307","messageId":"308","endLine":16,"endColumn":18},{"ruleId":"305","severity":1,"message":"337","line":24,"column":10,"nodeType":"307","messageId":"308","endLine":24,"endColumn":15},{"ruleId":"305","severity":1,"message":"338","line":24,"column":17,"nodeType":"307","messageId":"308","endLine":24,"endColumn":25},{"ruleId":"305","severity":1,"message":"315","line":26,"column":17,"nodeType":"307","messageId":"308","endLine":26,"endColumn":25},{"ruleId":"316","severity":1,"message":"339","line":70,"column":6,"nodeType":"318","endLine":70,"endColumn":13,"suggestions":"340"},{"ruleId":"330","severity":1,"message":"331","line":185,"column":59,"nodeType":"332","messageId":"333","endLine":185,"endColumn":61},{"ruleId":"311","severity":1,"message":"312","line":249,"column":1,"nodeType":"313","endLine":249,"endColumn":28},{"ruleId":"305","severity":1,"message":"341","line":4,"column":24,"nodeType":"307","messageId":"308","endLine":4,"endColumn":39},{"ruleId":"305","severity":1,"message":"342","line":4,"column":41,"nodeType":"307","messageId":"308","endLine":4,"endColumn":59},{"ruleId":"305","severity":1,"message":"315","line":17,"column":17,"nodeType":"307","messageId":"308","endLine":17,"endColumn":25},{"ruleId":"316","severity":1,"message":"343","line":45,"column":6,"nodeType":"318","endLine":45,"endColumn":13,"suggestions":"344"},{"ruleId":"311","severity":1,"message":"312","line":201,"column":1,"nodeType":"313","endLine":201,"endColumn":36},{"ruleId":"305","severity":1,"message":"314","line":1,"column":31,"nodeType":"307","messageId":"308","endLine":1,"endColumn":41},{"ruleId":"305","severity":1,"message":"315","line":19,"column":17,"nodeType":"307","messageId":"308","endLine":19,"endColumn":25},{"ruleId":"316","severity":1,"message":"343","line":42,"column":6,"nodeType":"318","endLine":42,"endColumn":13,"suggestions":"345"},{"ruleId":"346","severity":1,"message":"347","line":223,"column":19,"nodeType":"348","messageId":"349","endLine":223,"endColumn":49,"fix":"350"},{"ruleId":"311","severity":1,"message":"312","line":249,"column":1,"nodeType":"313","endLine":249,"endColumn":32},{"ruleId":"305","severity":1,"message":"314","line":1,"column":31,"nodeType":"307","messageId":"308","endLine":1,"endColumn":41},{"ruleId":"305","severity":1,"message":"315","line":10,"column":19,"nodeType":"307","messageId":"308","endLine":10,"endColumn":27},{"ruleId":"316","severity":1,"message":"351","line":54,"column":6,"nodeType":"318","endLine":54,"endColumn":18,"suggestions":"352"},{"ruleId":"305","severity":1,"message":"353","line":57,"column":14,"nodeType":"307","messageId":"308","endLine":57,"endColumn":19},{"ruleId":"330","severity":1,"message":"331","line":59,"column":11,"nodeType":"332","messageId":"333","endLine":59,"endColumn":13},{"ruleId":"330","severity":1,"message":"331","line":273,"column":40,"nodeType":"332","messageId":"333","endLine":273,"endColumn":42},{"ruleId":"330","severity":1,"message":"331","line":290,"column":40,"nodeType":"332","messageId":"333","endLine":290,"endColumn":42},{"ruleId":"311","severity":1,"message":"312","line":320,"column":1,"nodeType":"313","endLine":320,"endColumn":30},{"ruleId":"311","severity":1,"message":"312","line":29,"column":1,"nodeType":"313","endLine":29,"endColumn":32},{"ruleId":"311","severity":1,"message":"312","line":47,"column":1,"nodeType":"313","endLine":47,"endColumn":29},{"ruleId":"305","severity":1,"message":"314","line":1,"column":31,"nodeType":"307","messageId":"308","endLine":1,"endColumn":41},{"ruleId":"305","severity":1,"message":"315","line":9,"column":19,"nodeType":"307","messageId":"308","endLine":9,"endColumn":27},{"ruleId":"316","severity":1,"message":"354","line":57,"column":6,"nodeType":"318","endLine":57,"endColumn":18,"suggestions":"355"},{"ruleId":"316","severity":1,"message":"356","line":77,"column":5,"nodeType":"318","endLine":77,"endColumn":17,"suggestions":"357"},{"ruleId":"311","severity":1,"message":"312","line":418,"column":1,"nodeType":"313","endLine":418,"endColumn":32},{"ruleId":"305","severity":1,"message":"358","line":3,"column":24,"nodeType":"307","messageId":"308","endLine":3,"endColumn":33},{"ruleId":"359","severity":1,"message":"360","line":43,"column":37,"nodeType":"361","messageId":"362","endLine":43,"endColumn":38},{"ruleId":"311","severity":1,"message":"312","line":58,"column":1,"nodeType":"313","endLine":58,"endColumn":30},{"ruleId":"305","severity":1,"message":"363","line":1,"column":10,"nodeType":"307","messageId":"308","endLine":1,"endColumn":22},{"ruleId":"311","severity":1,"message":"312","line":57,"column":1,"nodeType":"313","endLine":57,"endColumn":41},{"ruleId":"305","severity":1,"message":"315","line":23,"column":17,"nodeType":"307","messageId":"308","endLine":23,"endColumn":25},{"ruleId":"316","severity":1,"message":"339","line":83,"column":6,"nodeType":"318","endLine":83,"endColumn":13,"suggestions":"364"},{"ruleId":"311","severity":1,"message":"312","line":238,"column":1,"nodeType":"313","endLine":238,"endColumn":30},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"315","line":45,"column":17,"nodeType":"307","messageId":"308","endLine":45,"endColumn":25},{"ruleId":"316","severity":1,"message":"365","line":80,"column":5,"nodeType":"307","endLine":80,"endColumn":17},{"ruleId":"316","severity":1,"message":"317","line":84,"column":6,"nodeType":"318","endLine":84,"endColumn":29,"suggestions":"366"},{"ruleId":"311","severity":1,"message":"312","line":496,"column":1,"nodeType":"313","endLine":496,"endColumn":31},{"ruleId":"305","severity":1,"message":"323","line":3,"column":9,"nodeType":"307","messageId":"308","endLine":3,"endColumn":20},{"ruleId":"305","severity":1,"message":"367","line":3,"column":84,"nodeType":"307","messageId":"308","endLine":3,"endColumn":94},{"ruleId":"305","severity":1,"message":"368","line":12,"column":10,"nodeType":"307","messageId":"308","endLine":12,"endColumn":19},{"ruleId":"305","severity":1,"message":"369","line":12,"column":21,"nodeType":"307","messageId":"308","endLine":12,"endColumn":33},{"ruleId":"305","severity":1,"message":"315","line":88,"column":17,"nodeType":"307","messageId":"308","endLine":88,"endColumn":25},{"ruleId":"305","severity":1,"message":"370","line":89,"column":10,"nodeType":"307","messageId":"308","endLine":89,"endColumn":18},{"ruleId":"305","severity":1,"message":"371","line":89,"column":20,"nodeType":"307","messageId":"308","endLine":89,"endColumn":31},{"ruleId":"316","severity":1,"message":"339","line":111,"column":6,"nodeType":"318","endLine":111,"endColumn":13,"suggestions":"372"},{"ruleId":"316","severity":1,"message":"317","line":115,"column":6,"nodeType":"318","endLine":115,"endColumn":29,"suggestions":"373"},{"ruleId":"374","severity":1,"message":"375","line":220,"column":15,"nodeType":"376","messageId":"377","endLine":220,"endColumn":39},{"ruleId":"374","severity":1,"message":"375","line":235,"column":15,"nodeType":"376","messageId":"377","endLine":235,"endColumn":47},{"ruleId":"374","severity":1,"message":"375","line":250,"column":15,"nodeType":"376","messageId":"377","endLine":250,"endColumn":39},{"ruleId":"374","severity":1,"message":"375","line":263,"column":15,"nodeType":"376","messageId":"377","endLine":263,"endColumn":47},{"ruleId":"378","severity":1,"message":"379","line":335,"column":21,"nodeType":"380","endLine":339,"endColumn":39},{"ruleId":"378","severity":1,"message":"379","line":342,"column":21,"nodeType":"380","endLine":346,"endColumn":40},{"ruleId":"378","severity":1,"message":"379","line":349,"column":21,"nodeType":"380","endLine":353,"endColumn":40},{"ruleId":"378","severity":1,"message":"379","line":356,"column":21,"nodeType":"380","endLine":360,"endColumn":44},{"ruleId":"311","severity":1,"message":"312","line":393,"column":1,"nodeType":"313","endLine":393,"endColumn":28},{"ruleId":"305","severity":1,"message":"309","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"305","severity":1,"message":"322","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":36},{"ruleId":"311","severity":1,"message":"312","line":7,"column":1,"nodeType":"313","endLine":7,"endColumn":32},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"381","line":3,"column":9,"nodeType":"307","messageId":"308","endLine":3,"endColumn":16},{"ruleId":"305","severity":1,"message":"334","line":4,"column":31,"nodeType":"307","messageId":"308","endLine":4,"endColumn":34},{"ruleId":"305","severity":1,"message":"382","line":6,"column":10,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"305","severity":1,"message":"383","line":6,"column":22,"nodeType":"307","messageId":"308","endLine":6,"endColumn":31},{"ruleId":"305","severity":1,"message":"384","line":6,"column":33,"nodeType":"307","messageId":"308","endLine":6,"endColumn":44},{"ruleId":"305","severity":1,"message":"385","line":8,"column":32,"nodeType":"307","messageId":"308","endLine":8,"endColumn":39},{"ruleId":"305","severity":1,"message":"327","line":9,"column":10,"nodeType":"307","messageId":"308","endLine":9,"endColumn":20},{"ruleId":"305","severity":1,"message":"386","line":9,"column":22,"nodeType":"307","messageId":"308","endLine":9,"endColumn":36},{"ruleId":"305","severity":1,"message":"315","line":21,"column":17,"nodeType":"307","messageId":"308","endLine":21,"endColumn":25},{"ruleId":"316","severity":1,"message":"387","line":47,"column":6,"nodeType":"318","endLine":47,"endColumn":13,"suggestions":"388"},{"ruleId":"316","severity":1,"message":"389","line":75,"column":5,"nodeType":"318","endLine":75,"endColumn":14,"suggestions":"390"},{"ruleId":"311","severity":1,"message":"312","line":254,"column":1,"nodeType":"313","endLine":254,"endColumn":33},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"391","line":8,"column":83,"nodeType":"307","messageId":"308","endLine":8,"endColumn":94},{"ruleId":"305","severity":1,"message":"327","line":9,"column":10,"nodeType":"307","messageId":"308","endLine":9,"endColumn":20},{"ruleId":"305","severity":1,"message":"315","line":25,"column":17,"nodeType":"307","messageId":"308","endLine":25,"endColumn":25},{"ruleId":"316","severity":1,"message":"339","line":59,"column":6,"nodeType":"318","endLine":59,"endColumn":13,"suggestions":"392"},{"ruleId":"311","severity":1,"message":"312","line":270,"column":1,"nodeType":"313","endLine":270,"endColumn":26},{"ruleId":"305","severity":1,"message":"393","line":1,"column":10,"nodeType":"307","messageId":"308","endLine":1,"endColumn":14},{"ruleId":"305","severity":1,"message":"314","line":2,"column":31,"nodeType":"307","messageId":"308","endLine":2,"endColumn":41},{"ruleId":"305","severity":1,"message":"394","line":8,"column":9,"nodeType":"307","messageId":"308","endLine":8,"endColumn":12},{"ruleId":"305","severity":1,"message":"315","line":11,"column":19,"nodeType":"307","messageId":"308","endLine":11,"endColumn":27},{"ruleId":"316","severity":1,"message":"395","line":63,"column":6,"nodeType":"318","endLine":63,"endColumn":13,"suggestions":"396"},{"ruleId":"316","severity":1,"message":"397","line":74,"column":5,"nodeType":"318","endLine":74,"endColumn":19,"suggestions":"398"},{"ruleId":"330","severity":1,"message":"331","line":209,"column":40,"nodeType":"332","messageId":"333","endLine":209,"endColumn":42},{"ruleId":"330","severity":1,"message":"331","line":226,"column":40,"nodeType":"332","messageId":"333","endLine":226,"endColumn":42},{"ruleId":"311","severity":1,"message":"312","line":276,"column":1,"nodeType":"313","endLine":276,"endColumn":31},{"ruleId":"378","severity":1,"message":"379","line":7,"column":9,"nodeType":"380","endLine":7,"endColumn":25},{"ruleId":"311","severity":1,"message":"312","line":12,"column":1,"nodeType":"313","endLine":12,"endColumn":29},{"ruleId":"305","severity":1,"message":"314","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":37},{"ruleId":"305","severity":1,"message":"381","line":3,"column":9,"nodeType":"307","messageId":"308","endLine":3,"endColumn":16},{"ruleId":"305","severity":1,"message":"382","line":6,"column":10,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"305","severity":1,"message":"383","line":6,"column":22,"nodeType":"307","messageId":"308","endLine":6,"endColumn":31},{"ruleId":"305","severity":1,"message":"384","line":6,"column":33,"nodeType":"307","messageId":"308","endLine":6,"endColumn":44},{"ruleId":"305","severity":1,"message":"327","line":11,"column":10,"nodeType":"307","messageId":"308","endLine":11,"endColumn":20},{"ruleId":"305","severity":1,"message":"315","line":24,"column":17,"nodeType":"307","messageId":"308","endLine":24,"endColumn":25},{"ruleId":"316","severity":1,"message":"387","line":53,"column":6,"nodeType":"318","endLine":53,"endColumn":13,"suggestions":"399"},{"ruleId":"316","severity":1,"message":"400","line":77,"column":5,"nodeType":"318","endLine":77,"endColumn":14,"suggestions":"401"},{"ruleId":"316","severity":1,"message":"339","line":97,"column":5,"nodeType":"318","endLine":97,"endColumn":21,"suggestions":"402"},{"ruleId":"316","severity":1,"message":"317","line":112,"column":5,"nodeType":"318","endLine":112,"endColumn":27,"suggestions":"403"},{"ruleId":"311","severity":1,"message":"312","line":325,"column":1,"nodeType":"313","endLine":325,"endColumn":30},{"ruleId":"305","severity":1,"message":"393","line":1,"column":10,"nodeType":"307","messageId":"308","endLine":1,"endColumn":14},{"ruleId":"305","severity":1,"message":"314","line":2,"column":31,"nodeType":"307","messageId":"308","endLine":2,"endColumn":41},{"ruleId":"305","severity":1,"message":"404","line":5,"column":21,"nodeType":"307","messageId":"308","endLine":5,"endColumn":33},{"ruleId":"305","severity":1,"message":"394","line":28,"column":9,"nodeType":"307","messageId":"308","endLine":28,"endColumn":12},{"ruleId":"305","severity":1,"message":"315","line":31,"column":19,"nodeType":"307","messageId":"308","endLine":31,"endColumn":27},{"ruleId":"316","severity":1,"message":"405","line":84,"column":6,"nodeType":"318","endLine":84,"endColumn":13,"suggestions":"406"},{"ruleId":"311","severity":1,"message":"312","line":349,"column":1,"nodeType":"313","endLine":349,"endColumn":35},"no-native-reassign",["407"],"no-negated-in-lhs",["408"],"no-unused-vars","'DebugRouter' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'MoreVertIcon' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useContext' is defined but never used.","'setDummy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.","ArrayExpression",["409"],"'globalState' is assigned a value but never used.","'Router' is defined but never used.","'useEffect' is defined but never used.","'TableFooter' is defined but never used.","'TablePagination' is defined but never used.","'CardActions' is defined but never used.","'TablePaginationActions' is defined but never used.","'Directions' is defined but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Cpu' is defined but never used.","'history' is assigned a value but never used.","'pathname' is assigned a value but never used.","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'reload'. Either include it or remove the dependency array.",["410"],"'getBusinessInfo' is defined but never used.","'updateBusinessInfo' is defined but never used.","React Hook useEffect has a missing dependency: 'projectID'. Either include it or remove the dependency array.",["411"],["412"],"no-useless-computed-key","Unnecessarily computed property [\"contactNumber\"] found.","Property","unnecessarilyComputedProperty",{"range":"413","text":"414"},"React Hook useEffect has missing dependencies: 'gateID', 'newInitialState', 'newState', and 'projectID'. Either include them or remove the dependency array.",["415"],"'value' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'deviceID', 'gateID', and 'handleChange'. Either include them or remove the dependency array.",["416"],"React Hook useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.",["417"],"'alertType' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'alertService' is defined but never used.",["418"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",["419"],"'IconButton' is defined but never used.","'validated' is assigned a value but never used.","'setValidated' is assigned a value but never used.","'projects' is assigned a value but never used.","'setProjects' is assigned a value but never used.",["420"],["421"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Tooltip' is defined but never used.","'useHistory' is defined but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","'delGate' is defined but never used.","'MonetizationOn' is defined but never used.","React Hook useEffect has a missing dependency: 'reloadProjects'. Either include it or remove the dependency array.",["422"],"React Hook useEffect has missing dependencies: 'reload' and 'reloadGates'. Either include them or remove the dependency array.",["423"],"'getProjects' is defined but never used.",["424"],"'func' is defined but never used.","'cnt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessRuleID' and 'projectID'. Either include them or remove the dependency array.",["425"],"React Hook useEffect has a missing dependency: 'loadGates'. Either include it or remove the dependency array.",["426"],["427"],"React Hook useEffect has a missing dependency: 'reloadAccessRules'. Either include it or remove the dependency array.",["428"],["429"],["430"],"'SelectPicker' is defined but never used.","React Hook useEffect has a missing dependency: 'ID'. Either include it or remove the dependency array.",["431"],"no-global-assign","no-unsafe-negation",{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"436","fix":"438"},[6639,6656],"\"contactNumber\"",{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"434","fix":"445"},{"desc":"432","fix":"446"},{"desc":"434","fix":"447"},{"desc":"432","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"434","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"449","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},"Update the dependencies array to be: [initialRows, curState, filter]",{"range":"467","text":"468"},"Update the dependencies array to be: [dummy, reload]",{"range":"469","text":"470"},"Update the dependencies array to be: [dummy, projectID]",{"range":"471","text":"472"},{"range":"473","text":"472"},"Update the dependencies array to be: [dummy, gateID, hide, newInitialState, newState, projectID]",{"range":"474","text":"475"},"Update the dependencies array to be: [deviceID, dummy, gateID, handleChange, hide]",{"range":"476","text":"477"},"Update the dependencies array to be: [curProject, handleChange]",{"range":"478","text":"479"},{"range":"480","text":"470"},{"range":"481","text":"468"},{"range":"482","text":"470"},{"range":"483","text":"468"},"Update the dependencies array to be: [dummy, reloadProjects]",{"range":"484","text":"485"},"Update the dependencies array to be: [project, reload, reloadGates]",{"range":"486","text":"487"},{"range":"488","text":"470"},"Update the dependencies array to be: [accessRuleID, dummy, projectID]",{"range":"489","text":"490"},"Update the dependencies array to be: [initialGates, loadGates]",{"range":"491","text":"492"},{"range":"493","text":"485"},"Update the dependencies array to be: [project, reloadAccessRules]",{"range":"494","text":"495"},"Update the dependencies array to be: [accessRuleVals, reload]",{"range":"496","text":"497"},"Update the dependencies array to be: [filter, initialRows, pNumber]",{"range":"498","text":"499"},"Update the dependencies array to be: [ID, dummy]",{"range":"500","text":"501"},[1758,1781],"[initialRows, curState, filter]",[2873,2880],"[dummy, reload]",[1445,1452],"[dummy, projectID]",[1442,1449],[1791,1803],"[dummy, gateID, hide, newInitialState, newState, projectID]",[1838,1850],"[deviceID, dummy, gateID, handleChange, hide]",[2313,2325],"[curProject, handleChange]",[2502,2509],[2446,2469],[3209,3216],[3263,3286],[1969,1976],"[dummy, reloadProjects]",[2702,2711],"[project, reload, reloadGates]",[2310,2317],[2190,2197],"[accessRuleID, dummy, projectID]",[2419,2433],"[initialGates, loadGates]",[2070,2077],[2765,2774],"[project, reloadAccessRules]",[3300,3316],"[accessRuleVals, reload]",[3605,3627],"[filter, initialRows, pNumber]",[2701,2708],"[ID, dummy]"]