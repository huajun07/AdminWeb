[{"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\index.js":"1","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\store.js":"2","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\App.js":"3","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\index.js":"4","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\index.js":"5","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\NavBar.js":"6","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Projects.js":"7","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Login.js":"8","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\EditProject.js":"9","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Home.js":"10","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\index.js":"11","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Devices.js":"12","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\BusinessDetails.js":"13","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\ProjectForm.js":"14","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\GateModal.js":"15","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ConfirmModal.js":"16","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\QueryModal.js":"17","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\DeviceModal.js":"18","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\index.js":"19","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\alertService.js":"20","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\AlertGroup.js":"21"},{"size":315,"mtime":1618497854270,"results":"22","hashOfConfig":"23"},{"size":770,"mtime":1618764495188,"results":"24","hashOfConfig":"23"},{"size":2528,"mtime":1618773435556,"results":"25","hashOfConfig":"23"},{"size":344,"mtime":1618771921615,"results":"26","hashOfConfig":"23"},{"size":200,"mtime":1618497854367,"results":"27","hashOfConfig":"23"},{"size":3505,"mtime":1618497854231,"results":"28","hashOfConfig":"23"},{"size":8075,"mtime":1618764930221,"results":"29","hashOfConfig":"23"},{"size":4244,"mtime":1618497854321,"results":"30","hashOfConfig":"23"},{"size":1678,"mtime":1618497854291,"results":"31","hashOfConfig":"23"},{"size":300,"mtime":1618497854305,"results":"32","hashOfConfig":"23"},{"size":192,"mtime":1618497854448,"results":"33","hashOfConfig":"23"},{"size":11597,"mtime":1618772989249,"results":"34","hashOfConfig":"23"},{"size":5418,"mtime":1618773271750,"results":"35","hashOfConfig":"23"},{"size":7699,"mtime":1618773279987,"results":"36","hashOfConfig":"23"},{"size":10484,"mtime":1618773261392,"results":"37","hashOfConfig":"23"},{"size":790,"mtime":1618767657385,"results":"38","hashOfConfig":"23"},{"size":1195,"mtime":1618767703342,"results":"39","hashOfConfig":"23"},{"size":11518,"mtime":1618773254880,"results":"40","hashOfConfig":"23"},{"size":90,"mtime":1618770782063,"results":"41","hashOfConfig":"23"},{"size":1196,"mtime":1618770665625,"results":"42","hashOfConfig":"23"},{"size":1652,"mtime":1618772534336,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1udplq",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"46"},"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\index.js",[],["100","101"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\store.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\App.js",["102"],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\NavBar.js",["103","104","105"],"import {\r\n  SidebarContent,\r\n  ProSidebar,\r\n  Menu,\r\n  MenuItem,\r\n  SubMenu\r\n} from \"react-pro-sidebar\";\r\nimport \"react-pro-sidebar/dist/css/styles.css\";\r\nimport { House, List } from \"react-bootstrap-icons\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport { store } from \"../store.js\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nexport function NavBar() {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const [toggled, setToggled] = useState(true);\r\n  const { dispatch } = storeContext;\r\n  let history = useHistory();\r\n  const logout = () => {\r\n    dispatch({\r\n      type: \"setAuth\",\r\n      value: false\r\n    });\r\n    dispatch({\r\n      type: \"setUser\",\r\n      value: \"\"\r\n    });\r\n    history.push(\"/\");\r\n  };\r\n  const direct = (props) => {\r\n    let path = props.target.dataset.value;\r\n    setToggled(true);\r\n    history.push(path);\r\n  };\r\n  const toggleSideBar = () => {\r\n    setToggled(!toggled);\r\n  };\r\n  return (\r\n    <div className=\"h-100 fixed-top clickThrough\">\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className=\"clickAble\">\r\n        <Navbar.Brand className=\"d-none d-sm-block\" onClick={toggleSideBar}>\r\n          <List />\r\n        </Navbar.Brand>\r\n        <Navbar.Brand>Admin</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto d-sm-block d-md-none\">\r\n            <Nav.Link>\r\n              <div data-value=\"/home\" onClick={direct}>\r\n                Home\r\n              </div>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n              <div data-value=\"/project\" onClick={direct}>\r\n                Project\r\n              </div>\r\n            </Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item data-value=\"/home\" onClick={direct}>\r\n                Action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">\r\n                Another action\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Navbar.Text>\r\n            <Nav.Link onClick={logout}>Signout</Nav.Link>\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <ProSidebar\r\n        className=\"clickAble d-none d-sm-block navbar-default navbar-static-top\"\r\n        collapsed={toggled}\r\n        collapsedWidth=\"0px\"\r\n      >\r\n        <SidebarContent>\r\n          <Menu iconShape=\"square\">\r\n            <MenuItem icon={<House />}>\r\n              <div data-value=\"/home\" onClick={direct}>\r\n                Home\r\n              </div>\r\n            </MenuItem>\r\n            <MenuItem icon={<House />}>\r\n              <div data-value=\"/project\" onClick={direct}>\r\n                Project\r\n              </div>\r\n            </MenuItem>\r\n            <SubMenu title=\"Components\">\r\n              <MenuItem>Component 1</MenuItem>\r\n              <MenuItem>Component 2</MenuItem>\r\n            </SubMenu>\r\n          </Menu>\r\n        </SidebarContent>\r\n      </ProSidebar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { NavBar };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Projects.js",["106","107","108"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { store } from \"../store.js\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { PencilSquare, Trash } from \"react-bootstrap-icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ConfirmModal } from \"../components/index.js\";\r\n\r\nexport function Projects({ match }) {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const server_URL = globalState.server_URL;\r\n  let history = useHistory();\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [toggle, setToggle] = useState({\r\n    delete: false,\r\n    add: false\r\n  });\r\n  const [curID, setCurID] = useState(\"\");\r\n  const [state, setState] = useState({\r\n    projectName: \"\",\r\n    location: \"\",\r\n    projectType: \"\"\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n  useEffect(() => {\r\n    console.log(\"hi\");\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getTable\",\r\n        content: {\r\n          objName: \"project\",\r\n          columns: [\"projectID\", \"projectName\", \"location\", \"projectType\"]\r\n        }\r\n      })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n          // get error message from body or default to response status\r\n          const error = (data && data.message) || response.status;\r\n          return Promise.reject(error);\r\n        }\r\n        console.log(data.content);\r\n        setInitialRows(data.content);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }, [dummy, server_URL]);\r\n\r\n  useEffect(() => {\r\n    filter();\r\n  }, [initialRows]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  const activateModal = (projectID) => {\r\n    setCurID(projectID);\r\n    toggleModal(\"delete\");\r\n  };\r\n\r\n  const filter = (e) => {\r\n    let { projectName, location, projectType } = state;\r\n    let curRows = initialRows;\r\n    setRows(\r\n      curRows.filter(\r\n        (row) =>\r\n          row[\"projectName\"].indexOf(projectName) >= 0 &&\r\n          row[\"location\"].indexOf(location) >= 0 &&\r\n          row[\"projectType\"].indexOf(projectType) >= 0\r\n      )\r\n    );\r\n  };\r\n\r\n  const insert = (e) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"createProject\",\r\n        content: {\r\n          projectName: \"\",\r\n          projectType: \"\",\r\n          location: \"\",\r\n          contactNumber: \"\",\r\n          maCompany: \"\",\r\n          equipManu: \"\"\r\n        }\r\n      })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n          // get error message from body or default to response status\r\n          const error = (data && data.content) || response.status;\r\n          return Promise.reject(error);\r\n        }\r\n        let ID = data.content.projectID;\r\n        history.push(\"/project/\" + ID);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  const edit = (projectID) => {\r\n    history.push(\"/project/\" + projectID);\r\n  };\r\n\r\n  const del = async (projectID) => {\r\n    /*\r\n    API for removing \r\n    */\r\n    console.log(projectID);\r\n    let curRows = initialRows;\r\n    console.log(curRows.filter((row) => projectID !== row[\"id\"]));\r\n    setInitialRows(curRows.filter((row) => projectID !== row[\"id\"]));\r\n    toggleModal(\"delete\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delete}\r\n        success={() => {\r\n          del(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delete\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this project?\"\r\n      />\r\n      <ConfirmModal\r\n        hide={toggle.add}\r\n        success={() => {\r\n          insert();\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"add\");\r\n        }}\r\n        title=\"Confirm Addition\"\r\n        body=\"Add a new project?\"\r\n      />\r\n      <div className=\"content\">\r\n        <Form inline className=\"rightFlex\">\r\n          <Row>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"projectName\"\r\n                placeholder=\"Name\"\r\n                onChange={handleChange}\r\n                value={state.projectName}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"location\"\r\n                placeholder=\"Location\"\r\n                onChange={handleChange}\r\n                value={state.location}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Form.Control\r\n                id=\"projectType\"\r\n                placeholder=\"Type\"\r\n                onChange={handleChange}\r\n                value={state.projectType}\r\n              />\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button type=\"button\" onClick={filter}>\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button\r\n                className=\"btn btn-success\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  toggleModal(\"add\");\r\n                }}\r\n              >\r\n                Add +\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n      <div className=\"content\">\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Project</TableCell>\r\n                <TableCell align=\"left\">Location</TableCell>\r\n                <TableCell align=\"left\">Type</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow key={row.projectName}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.projectName}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">{row.location}</TableCell>\r\n                  <TableCell align=\"left\">{row.projectType}</TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <IconButton onClick={() => edit(row.projectID)}>\r\n                      <PencilSquare\r\n                        data-value={row.projectID}\r\n                        size={21}\r\n                        color=\"royalblue\"\r\n                      />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => activateModal(row.projectID)}>\r\n                      <Trash color=\"red\" size={21} />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Projects };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Login.js",["109","110"],"import React, { useState, useContext } from \"react\";\r\nimport { store } from \"../store.js\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport function Login() {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const { dispatch } = storeContext;\r\n  let history = useHistory();\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    password: \"\"\r\n  });\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n  const reqLogin = (e) => {\r\n    e.preventDefault();\r\n    let { username, password } = state;\r\n    /*\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        username,\r\n        password\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL + \"/login\", requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n  \r\n      dispatch({\r\n        type: \"setAuth\",\r\n        value: true\r\n      });\r\n      return(\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/home\"\r\n          }}\r\n        />\r\n      );\r\n    })\r\n    .catch((error) => {\r\n      this.setState({ errorMessage: error.toString() });\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n    if (username === \"huajun\" && password === \"huajun\") {\r\n      dispatch({\r\n        type: \"setAuth\",\r\n        value: true\r\n      });\r\n      dispatch({\r\n        type: \"setUser\",\r\n        value: username\r\n      });\r\n      history.push(\"/home\");\r\n    } else if (username.length === 0) {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Username cannot be blank\";\r\n    } else if (password.length === 0) {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Password cannot be blank\";\r\n    } else {\r\n      document.getElementById(\"login-error\").innerText =\r\n        \"Invalid Username or Password\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"maincontainer h-100\">\r\n      <div className=\"container-fluid bg-light h-100\">\r\n        <div className=\"login d-flex align-items-center py-5\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-10 col-sm-6 col-md-5 col-xl-4 mx-auto \">\r\n                <h3 className=\"display-4\">Login</h3>\r\n                <p className=\"text-muted mb-4\">\r\n                  Enter your credentials to login.\r\n                </p>\r\n                <form>\r\n                  <div className=\"form-group mb-3\">\r\n                    <input\r\n                      id=\"username\"\r\n                      type=\"username\"\r\n                      placeholder=\"Username\"\r\n                      required=\"required\"\r\n                      className=\"form-control rounded-pill border-0 shadow-sm px-4\"\r\n                      onChange={handleChange}\r\n                      value={state.username}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group mb-3\">\r\n                    <input\r\n                      id=\"password\"\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      required=\"required\"\r\n                      className=\"form-control rounded-pill border-0 shadow-sm px-4 text-primary\"\r\n                      onChange={handleChange}\r\n                      value={state.password}\r\n                    />\r\n                  </div>\r\n                  <p id=\"login-error\" className=\"text-danger\"></p>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block text-uppercase mb-2 rounded-pill shadow-sm\"\r\n                    onClick={reqLogin}\r\n                  >\r\n                    Sign in\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Login };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\EditProject.js",["111"],"import {\r\n  ProjectForm,\r\n  BusinessDetails,\r\n  Devices\r\n} from \"./projectSubPages/index.js\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nexport function EditProject(props) {\r\n  return (\r\n    <div className=\"tabModal\">\r\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <Nav variant=\"pills\" className=\"flex-column\">\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"first\">Infomation</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"second\">Business</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"third\">Devices</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"fourth\">LED Config</Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Col>\r\n          <Col sm={9}>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"first\">\r\n                <ProjectForm ID={props.params.projectId} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"second\">\r\n                <BusinessDetails ID={props.params.projectId} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"third\">\r\n                <Devices ID={props.params.projectId} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"fourth\">\r\n                <div>Fourth</div>\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { EditProject };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\Home.js",["112","113","114","115"],"import React, { useState, useContext } from \"react\";\r\nimport { store } from \"../store.js\";\r\nexport function Home() {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const { dispatch } = storeContext;\r\n  return <div>Home</div>;\r\n}\r\n\r\nexport default { Home };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\Devices.js",["116","117","118","119","120","121","122","123"],"import { Card, Button, CardDeck, ButtonGroup, Modal } from \"react-bootstrap\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { DeviceModal, GateModal } from \"../../components/index.js\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport { ConfirmModal, QueryModal } from \"../../components/index.js\";\r\nimport { store } from \"../../store.js\";\r\nimport { alertService } from '../../services/index.js';\r\n\r\n\r\nimport entry from '../../assets/entry.jpg';\r\nimport exit from '../../assets/exit.png';\r\nimport sample from '../../assets/sample.svg';\r\n\r\nfunction image(value){\r\n  switch(value){\r\n    case \"entry\":\r\n      return entry;\r\n    case \"exit\":\r\n      return exit;\r\n    default:\r\n      return sample;\r\n  }\r\n  return entry;\r\n}\r\n\r\nexport function Devices(props) {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const server_URL = globalState.server_URL;\r\n  let ID = parseInt(props.ID);\r\n  const [dummy, setDummy] = useState(false);\r\n  const [gates, setGates] = useState([]);\r\n  const [devices, setDevices] = useState([]);\r\n  const [curGate, setCurGate] = useState(null);\r\n  const [curID,setCurId] = useState(null);\r\n  const [toggle, setToggle] = useState({\r\n    addGate: false,\r\n    delGate: false,\r\n    addDevice: false,\r\n    delDevice: false\r\n  });\r\n  const [info, setInfo] = useState({\r\n    type: null,\r\n    id: null\r\n  });\r\n  let cardMenu = [];\r\n  useEffect(() => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getTable\",\r\n        content: {\r\n          objName: \"gate\",\r\n          columns: [\"gateID\", \"gateName\", \"gateType\"],\r\n          filters:{\r\n            projectID: ID\r\n          }\r\n        }\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.content) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      setGates(data.content);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\" + error);\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  }, [dummy]);\r\n\r\n  useEffect(() => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getTable\",\r\n        content: {\r\n          objName: \"device\",\r\n          columns: [\"deviceID\", \"deviceName\", \"deviceType\", \"deviceStatus\"],\r\n          filters:{\r\n            gateID: curGate\r\n          }\r\n        }\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.content) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      console.log(curGate);\r\n      console.log(data.content);\r\n      setDevices(data.content);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\" + error);\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  }, [curGate]);\r\n\r\n  const handleAddGate = () => {\r\n    const newGateReq = {\r\n      projectID: ID,\r\n      gateName: \"Gate\",\r\n      gateType: \"entry\",\r\n      isOpenForInvalid: false,\r\n      isOpenForTemp: false,\r\n      isChargeable: false,\r\n      ledOnTime: \"00:00:00\",\r\n      ledOffTime: \"00:00:00\"\r\n    }\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"createGate\",\r\n        content: newGateReq\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      let newGate = {\r\n        ...newGateReq,\r\n        gateID: data.message.gateID\r\n      }\r\n      setGates((prevGates) => \r\n        prevGates.concat(newGate)\r\n      );\r\n      setCurGate(data.message.gateID);\r\n      alertService.success(\"Gate Added\");\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\" + error);\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  const handleAddDevice = (deviceID) => {\r\n    console.log(\"adding\",deviceID);\r\n    /*\r\n    const newDeviceReq = {\r\n      deviceID,\r\n      gateID: 1\r\n      deviceName: \"Front Entry Camera\",\r\n      deviceType: \"LPR camera\",\r\n      deviceCarpark: \"Trevista Car Park\",\r\n      deviceStatus: \"online\",\r\n      manufacturer: \"example manufacturer\",\r\n      manufacturerCode: \"xyz123\",\r\n      direction: \"entry\",\r\n      isPrimaryDevice: true\r\n\r\n    }\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"createDevice\",\r\n        content: newDeviceReq\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      let newDevice = {\r\n        ...newDeviceReq,\r\n        gateID: data.message.gateID\r\n      }\r\n      setDevices((prevDevices) => \r\n        prevDevices.concat(newDevice)\r\n      );\r\n      alertService.success(\"Device Added\"\");\r\n    })\r\n    .catch((error) => {\r\n        alertService.error(\"There was an error!\" + error);\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n  };\r\n\r\n  const delGate = (id) => {console.log(\"deleting\",id)};\r\n\r\n  const delDevice = (id) => {console.log(\"deleting\",id)};\r\n\r\n  const toggleModal = (modal) => {\r\n    let prevVal = toggle[modal];\r\n    setToggle((prevState) => ({\r\n      ...prevState,\r\n      [modal]: !prevVal\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConfirmModal\r\n        hide={toggle.delGate}\r\n        success={() => {\r\n          delGate(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delGate\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this gate?\"\r\n      />\r\n      <ConfirmModal\r\n        hide={toggle.addGate}\r\n        success={() => {\r\n          handleAddGate();\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"addGate\");\r\n        }}\r\n        title=\"Confirm Addition\"\r\n        body=\"Add a new gate?\"\r\n      />\r\n      <ConfirmModal\r\n        hide={toggle.delDevice}\r\n        success={() => {\r\n          delDevice(curID);\r\n        }}\r\n        toggleModal={() => {\r\n          toggleModal(\"delDevice\");\r\n        }}\r\n        title=\"Confirm Deletion\"\r\n        body=\"Delete this device?\"\r\n      />\r\n      <QueryModal\r\n        hide={toggle.addDevice}\r\n        success={handleAddDevice}\r\n        toggleModal={() => {\r\n          toggleModal(\"addDevice\");\r\n        }}\r\n        title=\"Confirm Addition\"\r\n        body=\"Enter Device ID\"\r\n      />\r\n      <div>\r\n      {info.type === null? null:(\r\n        info.type === \"gate\"? \r\n        <GateModal \r\n        id={info.id}\r\n        toggleModal={\r\n          ()=>setInfo({\r\n            type: null,\r\n            id: null\r\n          })}\r\n          />\r\n          :\r\n          <DeviceModal \r\n        id={info.id}\r\n        toggleModal={\r\n          ()=>setInfo({\r\n            type: null,\r\n            id: null\r\n          })}\r\n          />\r\n      )}\r\n      </div>\r\n      <div className=\"gateContainer\">\r\n        <div id=\"gateHeader\">\r\n          <div className = \"navbar-brand\">Gates</div>\r\n        </div>\r\n        <div id=\"addGate\">\r\n          <IconButton aria-label=\"add\" onClick={()=> toggleModal(\"addGate\")}>\r\n            <AddIcon style={{ color: \"#4caf50\" }} />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"deviceTab cardDiv scrollbar scrollbar-primary align-items-center d-flex\">\r\n          <CardDeck>\r\n            {gates.map((gate) => (\r\n              <Card className = \"deviceCard\">\r\n                <div id=\"delGate\">\r\n                  <IconButton onClick={() => {\r\n                    setCurId(gate.gateID);\r\n                    toggleModal(\"delGate\");\r\n                  }}>\r\n                    <HighlightOffIcon style={{ color: \"#d32f2f\" }} />\r\n                  </IconButton>\r\n                </div>\r\n                <Card.Body>\r\n                  <Card.Text>{gate.gateName}</Card.Text>\r\n                  <Card.Img\r\n                    className = \"cardImg primary-transform\"\r\n                    variant=\"top\"\r\n                    src={image(gate.gateType)}\r\n                  />\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className = \"cardButton\"\r\n                    onClick={() => {\r\n                      setInfo({\r\n                        type: \"gate\",\r\n                        id: gate.gateID\r\n                      });\r\n                      setCurGate(gate.gateID);\r\n                    }}\r\n                  >\r\n                    Devices\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n          </CardDeck>\r\n        </div>\r\n      </div>\r\n      {curGate === null ? null : \r\n      <div className=\"deviceContainter\">\r\n        <div id=\"gateHeader\">\r\n        <div className = \"navbar-brand\">Devices</div>\r\n        </div>\r\n        <div id=\"addGate\">\r\n          <IconButton aria-label=\"add\" onClick={()=>toggleModal(\"addDevice\")}>\r\n            <AddIcon style={{ color: \"#4caf50\" }} />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"deviceTab cardDiv scrollbar scrollbar-primary align-items-center d-flex\">\r\n          <CardDeck>\r\n            {devices.map((device) => (\r\n              <Card className = \"deviceCard\">\r\n                <div id=\"delGate\">\r\n                  <IconButton onClick={() => {\r\n                    setCurId(device.deviceID);\r\n                    toggleModal(\"delDevice\");\r\n                  }}>\r\n                    <HighlightOffIcon style={{ color: \"#d32f2f\" }} />\r\n                  </IconButton>\r\n                </div>\r\n                <Card.Body>\r\n                  <Card.Text>{device.deviceName}</Card.Text>\r\n                  <Card.Img\r\n                    style = {{cursor: \"pointer\"}}\r\n                    className = {\"cardImg\" + device.deviceStatus === \"Offline\"? \" primary-transform\": \"\"}\r\n                    variant=\"top\"\r\n                    src={image(device.deviceType)}\r\n                    onClick={() => {\r\n                      setInfo({\r\n                        type: \"device\",\r\n                        id: device.deviceID\r\n                      });\r\n                    }}\r\n                  />\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n          </CardDeck>\r\n        </div>\r\n      </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Devices };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\BusinessDetails.js",["124","125","126","127"],"import { useState, useEffect } from \"react\";\r\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\r\nimport NumericInput from \"react-numeric-input\";\r\nimport { alertService } from '../../services/index.js';\r\n\r\nexport function BusinessDetails(props) {\r\n  let ID = props.ID;\r\n  const [state, setState] = useState({\r\n    barrierDelay: 5,\r\n    networkWarningDuration: 5,\r\n    instantImgUpload: false,\r\n    vehicleColorDetect: false,\r\n    localImgStore: false\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    /*\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        id: props.id\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL + \"/projectIdQuery\", requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n  \r\n      initialRows = response.data;\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error!\", error);\r\n    });*/\r\n    let res = {\r\n      barrierDelay: 5,\r\n      networkWarningDuration: 5,\r\n      instantImgUpload: false,\r\n      vehicleColorDetect: false,\r\n      localImgStore: false\r\n    };\r\n    setState(res);\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    if (typeof state[id] === \"boolean\") {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    update();\r\n  };\r\n\r\n  const update = () => {\r\n    /* Pending API for project details update*/\r\n  };\r\n\r\n  function myFormat(num) {\r\n    return num + \" mins\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Barrier Opening Delay\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <InputGroup>\r\n              <NumericInput\r\n                strict\r\n                id=\"barrierDelay\"\r\n                format={myFormat}\r\n                className=\"form-control\"\r\n                value={state.barrierDelay}\r\n                min={0}\r\n                max={100}\r\n                onChange={handleChange}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Duration before issuing network down warning\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <InputGroup>\r\n              <NumericInput\r\n                strict\r\n                id=\"networkWarningDuration\"\r\n                format={myFormat}\r\n                className=\"form-control\"\r\n                value={state.networkWarningDuration}\r\n                min={0}\r\n                max={100}\r\n                onChange={handleChange}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Instant Image Upload to Server\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\"align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.instantImgUpload}\r\n              type=\"switch\"\r\n              id=\"instantImgUpload\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Local Storage of images after uploading\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\" align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.localImgStore}\r\n              type=\"switch\"\r\n              id=\"localImgStore\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Enable Vehicle Colour Detection\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n            className=\" align-items-center d-flex justify-content-center\"\r\n          >\r\n            <Form.Check\r\n              checked={state.vehicleColorDetect}\r\n              type=\"switch\"\r\n              id=\"vehicleColorDetect\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Col sm={{ span: 8, offset: 7 }}>\r\n            <Button type=\"submit\">Update</Button>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { BusinessDetails };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\pages\\projectSubPages\\ProjectForm.js",["128","129","130","131"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport { store } from \"../../store.js\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { alertService } from '../../services/index.js';\r\n\r\nexport function ProjectForm(props) {\r\n  const storeContext = useContext(store);\r\n  const globalState = storeContext.state;\r\n  const server_URL = globalState.server_URL;\r\n  let ID = parseInt(props.ID);\r\n  const [validated, setValidated] = useState(false);\r\n  const [state, setState] = useState({\r\n    projectName: \"\",\r\n    projectType: \"\",\r\n    location: \"\",\r\n    contactNumber: \"\",\r\n    maCompany: \"\",\r\n    equipManu: \"\"\r\n  });\r\n  const [dummy, setDummy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getProject\",\r\n        content: {\r\n          projectID: ID\r\n        }\r\n      })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n          // get error message from body or default to response status\r\n          const error = (data && data.message) || response.status;\r\n          return Promise.reject(error);\r\n        }\r\n        setState(data.message);\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [id]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    console.log(form.checkValidity());\r\n    if (form.checkValidity()) update();\r\n  };\r\n\r\n  const update = () => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"modifyProject\",\r\n        content: {\r\n          projectID: ID,\r\n          modifyParams: state\r\n        }\r\n      })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n          // get error message from body or default to response status\r\n          const error = (data && data.message) || response.status;\r\n          return Promise.reject(error);\r\n        }\r\n        alertService.success('Update Successful!');\r\n      })\r\n      .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project ID\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control type=\"text\" placeholder={ID} readOnly />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project Name\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              placeholder=\"Name\"\r\n              id=\"projectName\"\r\n              name=\"projectName\"\r\n              value={state.projectName}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Project Name is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Project Type\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              custom\r\n              required\r\n              as=\"select\"\r\n              id=\"projectType\"\r\n              name=\"projectType\"\r\n              value={state.projectType}\r\n              onChange={handleChange}\r\n            >\r\n              <option value={\"\"}>--Select Type--</option>\r\n              <option>condo</option>\r\n              <option>hdb</option>\r\n            </Form.Control>\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Project Type is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Location\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"location\"\r\n              name=\"location\"\r\n              value={state.location}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Location is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Equipment Manufacturer\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"equipManu\"\r\n              name=\"equipManu\"\r\n              value={state.equipManu}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Equipment Manufacturer is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            MA Company\r\n          </Form.Label>\r\n          <Col\r\n            sm={4}\r\n          >\r\n            <Form.Control\r\n              required\r\n              id=\"maCompany\"\r\n              name=\"maCompany\"\r\n              value={state.maCompany}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              MA Company is a required field.\r\n            </Form.Control.Feedback>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Form.Label column sm={4}>\r\n            Contact No.\r\n          </Form.Label>\r\n          <Form.Label\r\n            column\r\n            sm={4}\r\n          >\r\n            <PhoneInput\r\n              inputProps={{\r\n                required: true\r\n              }}\r\n              placeholder=\"+XX-XXXX-XXXX\"\r\n              id=\"contactNumber\"\r\n              name=\"contactNumber\"\r\n              country={\"sg\"}\r\n              value={state.contactNumber}\r\n              onChange={(e)=>{\r\n                setState((prevState) => ({\r\n                  ...prevState,\r\n                  [\"contactNumber\"]: e\r\n                }));\r\n              }}\r\n              isValid={(value, country) => {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              }}\r\n            />\r\n          </Form.Label>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row}>\r\n          <Col sm={{ span: 8, offset: 7 }}>\r\n            <Button type=\"submit\">Update</Button>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { ProjectForm };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\GateModal.js",["132","133","134"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Modal } from \"react-bootstrap\";\r\nimport TimeField from 'react-simple-timefield';\r\nimport { store } from \"../store.js\";\r\nimport { alertService } from '../services/index.js';\r\n\r\nexport function GateModal(props) {\r\n    const storeContext = useContext(store);\r\n    const globalState = storeContext.state;\r\n    const server_URL = globalState.server_URL;\r\n    let ID = parseInt(props.id);\r\n    let toggleModel = props.toggleModal;\r\n    const [validated, setValidated] = useState(false);\r\n    const [state, setState] = useState({});\r\n    const [dummy, setDummy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setValidated(false);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getGate\",\r\n        content: {\r\n            gateID: ID\r\n        }\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n   //   console.log(\"hey\");\r\n   //   console.log(data.message);\r\n      setState(data.message);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  }, [dummy, ID]);\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n      console.log(e,filler,e2);\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    if (typeof state[id] === \"boolean\") {\r\n        console.log(\"bool\");\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if (form.checkValidity()) update();\r\n  };\r\n\r\n  const update = () => {\r\n    const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"modifyGate\",\r\n        content: {\r\n            gateID: ID,\r\n            modifyParams: state\r\n        }\r\n    })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n        }\r\n        alertService.success(\"Update Successful!\");\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className =\"posAbs\">\r\n      <div className = \"modal-dialog modalDevice modal-dialog-scrollable\">\r\n        <div className = \"modal-content\">\r\n            <Modal.Header\r\n             onHide={toggleModel}\r\n             closeButton>\r\n                <Modal.Title>Gate Details</Modal.Title>\r\n            </Modal.Header>\r\n            <div className=\"modal-body\">\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate ID\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Control type=\"text\" placeholder={ID} readOnly />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Name\"\r\n                        id=\"gateName\"\r\n                        name=\"gateName\"\r\n                        value={state.gateName}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Gate Name is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate Type\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        custom\r\n                        required\r\n                        as=\"select\"\r\n                        id=\"gateType\"\r\n                        name=\"gateType\"\r\n                        value={state.gateType}\r\n                        onChange={handleChange}\r\n                        >\r\n                        <option value={\"\"}>--Select Type--</option>\r\n                        <option>entry</option>\r\n                        <option>exit</option>\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Gate Type is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Open Gate for invalid/expired season pass holders\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isOpenForInvalid}\r\n                        type=\"switch\"\r\n                        id=\"isOpenForInvalid\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Open Gate for temporary vehicles\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isOpenForTemp}\r\n                        type=\"switch\"\r\n                        id=\"isOpenForTemp\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Charge fee for entry\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isChargeable}\r\n                        type=\"switch\"\r\n                        id=\"isChargeable\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                    Time to turn on the LPR camera’s LED\r\n                    </Form.Label>\r\n                    <Form.Label\r\n                        column\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex\"\r\n                    >\r\n                        <TimeField \r\n                        value={state.ledOnTime} \r\n                        onChange={handleChange}\r\n                        showSeconds = {true}\r\n                        input={\r\n                            <input\r\n                              id = \"ledOnTime\"\r\n                              type=\"text\"\r\n                              name=\"ledOnTime\"\r\n                              placeholder=\"Time\"\r\n                              className=\"form-control\"\r\n                            />\r\n                        } />\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Time to turn off the LPR\r\n                    </Form.Label>\r\n                    <Form.Label\r\n                        column\r\n                        className=\"align-items-center d-flex\"\r\n                        sm={6}\r\n                    >\r\n                        <TimeField \r\n                        value={state.ledOffTime} \r\n                        onChange={handleChange}\r\n                        showSeconds = {true}\r\n                        input={\r\n                            <input\r\n                              id = \"ledOffTime\"\r\n                              type=\"text\"\r\n                              name=\"ledOffTime\"\r\n                              placeholder=\"Time\"\r\n                              className=\"form-control\"\r\n                            />\r\n                        } />\r\n                    </Form.Label>\r\n                    </Form.Group>\r\n\r\n                </div>\r\n                <Form.Group as={Row}>\r\n                <Col sm={{ span: 1, offset: 9 }}>\r\n                    <Button type=\"submit\">Update</Button>\r\n                </Col>\r\n                </Form.Group>\r\n            </Form>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { GateModal };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\ConfirmModal.js",["135"],"import { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport function ConfirmModal(props) {\r\n  let toggleModal = props.toggleModal;\r\n  let success = props.success;\r\n  let hide = props.hide;\r\n  let body = props.body;\r\n  let title = props.title;\r\n  return (\r\n    <Modal show={hide} onHide={toggleModal}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{body}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={toggleModal}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={()=>{\r\n          success();\r\n          toggleModal();\r\n        }}>\r\n          Confirm\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default { ConfirmModal};\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\QueryModal.js",["136"],"import { Button, Modal, Form } from \"react-bootstrap\";\r\nimport {useState} from 'react';\r\n\r\nexport function QueryModal(props) {\r\n    let toggleModal = props.toggleModal;\r\n    let success = props.success;\r\n    let hide = props.hide;\r\n    let body = props.body;\r\n    let title = props.title;\r\n    const [value,setValue] = useState(\"\");\r\n    const handleChange = (e) =>{\r\n      setValue(e.target.value);\r\n    }\r\n    return (\r\n      <Modal show={hide} onHide={toggleModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Label>{body}</Form.Label>\r\n            <Form.Control \r\n            value={value}\r\n            onChange={handleChange}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={toggleModal}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={()=>{\r\n              success(value);\r\n              toggleModal();\r\n              }}>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default {QueryModal};","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\DeviceModal.js",["137","138","139","140"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Row, Col, Button, Modal } from \"react-bootstrap\";\r\nimport TimeField from 'react-simple-timefield';\r\nimport { store } from \"../store.js\";\r\nimport { alertService } from '../services/index.js';\r\n\r\nexport function DeviceModal(props) {\r\n    const storeContext = useContext(store);\r\n    const globalState = storeContext.state;\r\n    const server_URL = globalState.server_URL;\r\n    let ID = parseInt(props.id);\r\n    let toggleModel = props.toggleModal;\r\n    const [validated, setValidated] = useState(false);\r\n    const [state, setState] = useState({});\r\n    const [dummy, setDummy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"getDevice\",\r\n        content: {\r\n            deviceID: ID\r\n        }\r\n      })\r\n    };\r\n    \r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n  \r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      console.log(data.message);\r\n      setState(data.message);\r\n    })\r\n    .catch((error) => {\r\n      alertService.error(\"There was an error!\");\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n  }, [dummy]);\r\n\r\n  const handleChange = (e, filler, e2) => {\r\n      console.log(e,filler,e2);\r\n    let id, value;\r\n    if (e2 === undefined) {\r\n      id = e.target.id;\r\n      value = e.target.value;\r\n    } else {\r\n      id = e2.id;\r\n      value = e;\r\n    }\r\n    console.log(typeof state[id]);\r\n    if (typeof state[id] === \"boolean\") {\r\n        console.log(\"bool\");\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: !state[id]\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        [id]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if (form.checkValidity()) update();\r\n  };\r\n\r\n  const update = () => {\r\n    const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n        authID: \"\",\r\n        serviceName: \"modifyDevice\",\r\n        content: {\r\n            deviceID: ID,\r\n            modifyParams: state\r\n        }\r\n    })\r\n    };\r\n    fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (data.status !== \"success\") {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n        }\r\n        alertService.success(\"Update Successful!\");\r\n    })\r\n    .catch((error) => {\r\n        alertService.error(\"There was an error!\");\r\n        console.error(\"There was an error!\", error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className =\"posAbs\">\r\n      <div className = \"modal-dialog modalDevice modal-dialog-scrollable\">\r\n        <div className = \"modal-content\">\r\n            <Modal.Header\r\n             onHide={toggleModel}\r\n             closeButton>\r\n                <Modal.Title>Device Details</Modal.Title>\r\n            </Modal.Header>\r\n            <div className=\"modal-body\">\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Gate ID\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Control type=\"text\" placeholder={state.gateID} readOnly />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device ID\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"ID\"\r\n                        id=\"deviceID\"\r\n                        name=\"deviceID\"\r\n                        value={state.deviceID}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device ID is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device Name\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Name\"\r\n                        id=\"deviceName\"\r\n                        name=\"deviceName\"\r\n                        value={state.deviceName}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device Name is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Device Type\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Type\"\r\n                        id=\"deviceType\"\r\n                        name=\"deviceType\"\r\n                        value={state.deviceType}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Device Type is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Carpark which the device belongs to\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Carpark\"\r\n                        id=\"deviceCarpark\"\r\n                        name=\"deviceCarpark\"\r\n                        value={state.deviceCarpark}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Capark is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Status\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Control type=\"text\" placeholder={state.deviceStatus} readOnly />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Manufacturer\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Manufacturer\"\r\n                        id=\"manufacturer\"\r\n                        name=\"manufacturer\"\r\n                        value={state.manufacturer}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Manufacturer is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Manufacturer Code\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Manufacturer Code\"\r\n                        id=\"manufacturerCode\"\r\n                        name=\"manufacturerCode\"\r\n                        value={state.manufacturer}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Manufacturer Code is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                         Direction\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                    >\r\n                        <Form.Control\r\n                        required\r\n                        placeholder=\"Direction\"\r\n                        id=\"direction\"\r\n                        name=\"direction\"\r\n                        value={state.manufacturer}\r\n                        onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Direction is a required field.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row}>\r\n                    <Form.Label column sm={6}>\r\n                        Is Primary Device\r\n                    </Form.Label>\r\n                    <Col\r\n                        sm={6}\r\n                        className=\"align-items-center d-flex justify-content-center\"\r\n                    >\r\n                        <Form.Check\r\n                        checked={state.isPrimaryDevice}\r\n                        type=\"switch\"\r\n                        id=\"isPrimaryDevice\"\r\n                        onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                </div>\r\n                <Form.Group as={Row}>\r\n                <Col sm={{ span: 1, offset: 9 }}>\r\n                    <Button type=\"submit\">Update</Button>\r\n                </Col>\r\n                </Form.Group>\r\n            </Form>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { DeviceModal };\r\n","C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\index.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\services\\alertService.js",[],"C:\\Users\\teowh\\Desktop\\Projects\\Admin_Web\\AdminWeb\\src\\components\\AlertGroup.js",["141","142","143"],"import React from 'react';\r\n\r\nimport { alertService, alertType } from '../services/index.js';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport class AlertGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            alerts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // subscribe to new alert notifications\r\n        this.subscription = alertService.onAlert(this.props.id)\r\n            .subscribe(alert => {\r\n                // add alert to array\r\n                this.setState({ alerts: [...this.state.alerts, alert] });\r\n\r\n                // auto close alert if required\r\n                setTimeout(() => this.removeAlert(alert), 3000);\r\n            });\r\n\r\n        // clear alerts on location change\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // unsubscribe & unlisten to avoid memory leaks\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    removeAlert(alert) {\r\n        this.setState({ alerts: this.state.alerts.filter(x => x !== alert) })\r\n    }\r\n\r\n    render() {\r\n        const { alerts } = this.state;\r\n        if (!alerts.length) return null;\r\n        return (\r\n            <div className=\"alertGrp\">\r\n                {console.log(alerts),\r\n                alerts.map((alert,idx) =>\r\n                    <Alert \r\n                    key = {idx} \r\n                    variant={alert.type}\r\n                    dismissible = {true}\r\n                    onClose={()=>{this.removeAlert(alert)}}>\r\n                        {alert.message}\r\n                    </Alert>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default {AlertGroup} ;",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":16,"column":7,"nodeType":"150","messageId":"151","endLine":16,"endColumn":18},{"ruleId":"148","severity":1,"message":"152","line":13,"column":22,"nodeType":"150","messageId":"151","endLine":13,"endColumn":26},{"ruleId":"148","severity":1,"message":"153","line":17,"column":9,"nodeType":"150","messageId":"151","endLine":17,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":109,"column":1,"nodeType":"156","endLine":109,"endColumn":27},{"ruleId":"148","severity":1,"message":"157","line":33,"column":17,"nodeType":"150","messageId":"151","endLine":33,"endColumn":25},{"ruleId":"158","severity":1,"message":"159","line":67,"column":6,"nodeType":"160","endLine":67,"endColumn":19,"suggestions":"161"},{"ruleId":"154","severity":1,"message":"155","line":263,"column":1,"nodeType":"156","endLine":263,"endColumn":29},{"ruleId":"148","severity":1,"message":"153","line":6,"column":9,"nodeType":"150","messageId":"151","endLine":6,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":133,"column":1,"nodeType":"156","endLine":133,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":52,"column":1,"nodeType":"156","endLine":52,"endColumn":32},{"ruleId":"148","severity":1,"message":"162","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"153","line":5,"column":9,"nodeType":"150","messageId":"151","endLine":5,"endColumn":20},{"ruleId":"148","severity":1,"message":"163","line":6,"column":11,"nodeType":"150","messageId":"151","endLine":6,"endColumn":19},{"ruleId":"154","severity":1,"message":"155","line":10,"column":1,"nodeType":"156","endLine":10,"endColumn":25},{"ruleId":"148","severity":1,"message":"164","line":1,"column":34,"nodeType":"150","messageId":"151","endLine":1,"endColumn":45},{"ruleId":"148","severity":1,"message":"165","line":1,"column":47,"nodeType":"150","messageId":"151","endLine":1,"endColumn":52},{"ruleId":"166","severity":1,"message":"167","line":25,"column":3,"nodeType":"168","messageId":"169","endLine":25,"endColumn":16},{"ruleId":"148","severity":1,"message":"157","line":33,"column":17,"nodeType":"150","messageId":"151","endLine":33,"endColumn":25},{"ruleId":"148","severity":1,"message":"170","line":48,"column":7,"nodeType":"150","messageId":"151","endLine":48,"endColumn":15},{"ruleId":"158","severity":1,"message":"171","line":82,"column":6,"nodeType":"160","endLine":82,"endColumn":13,"suggestions":"172"},{"ruleId":"158","severity":1,"message":"173","line":119,"column":6,"nodeType":"160","endLine":119,"endColumn":15,"suggestions":"174"},{"ruleId":"154","severity":1,"message":"155","line":391,"column":1,"nodeType":"156","endLine":391,"endColumn":28},{"ruleId":"148","severity":1,"message":"175","line":4,"column":10,"nodeType":"150","messageId":"151","endLine":4,"endColumn":22},{"ruleId":"148","severity":1,"message":"176","line":7,"column":7,"nodeType":"150","messageId":"151","endLine":7,"endColumn":9},{"ruleId":"148","severity":1,"message":"157","line":15,"column":17,"nodeType":"150","messageId":"151","endLine":15,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":199,"column":1,"nodeType":"156","endLine":199,"endColumn":36},{"ruleId":"148","severity":1,"message":"157","line":22,"column":17,"nodeType":"150","messageId":"151","endLine":22,"endColumn":25},{"ruleId":"158","severity":1,"message":"171","line":51,"column":6,"nodeType":"160","endLine":51,"endColumn":13,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":244,"column":19,"nodeType":"180","messageId":"181","endLine":244,"endColumn":39,"fix":"182"},{"ruleId":"154","severity":1,"message":"155","line":268,"column":1,"nodeType":"156","endLine":268,"endColumn":32},{"ruleId":"148","severity":1,"message":"157","line":15,"column":19,"nodeType":"150","messageId":"151","endLine":15,"endColumn":27},{"ruleId":"158","severity":1,"message":"173","line":49,"column":6,"nodeType":"160","endLine":49,"endColumn":17,"suggestions":"183"},{"ruleId":"154","severity":1,"message":"155","line":302,"column":1,"nodeType":"156","endLine":302,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":30,"column":1,"nodeType":"156","endLine":30,"endColumn":32},{"ruleId":"154","severity":1,"message":"155","line":43,"column":1,"nodeType":"156","endLine":43,"endColumn":29},{"ruleId":"148","severity":1,"message":"184","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":17},{"ruleId":"148","severity":1,"message":"157","line":15,"column":19,"nodeType":"150","messageId":"151","endLine":15,"endColumn":27},{"ruleId":"158","severity":1,"message":"171","line":47,"column":6,"nodeType":"160","endLine":47,"endColumn":13,"suggestions":"185"},{"ruleId":"154","severity":1,"message":"155","line":329,"column":1,"nodeType":"156","endLine":329,"endColumn":32},{"ruleId":"148","severity":1,"message":"186","line":3,"column":24,"nodeType":"150","messageId":"151","endLine":3,"endColumn":33},{"ruleId":"187","severity":1,"message":"188","line":43,"column":37,"nodeType":"189","messageId":"190","endLine":43,"endColumn":38},{"ruleId":"154","severity":1,"message":"155","line":58,"column":1,"nodeType":"156","endLine":58,"endColumn":30},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'DebugRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'globalState' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setDummy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.","ArrayExpression",["193"],"'useState' is defined but never used.","'dispatch' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'Modal' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'cardMenu' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ID' and 'server_URL'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'server_URL'. Either include it or remove the dependency array.",["195"],"'alertService' is defined but never used.","'ID' is assigned a value but never used.",["196"],"no-useless-computed-key","Unnecessarily computed property [\"contactNumber\"] found.","Property","unnecessarilyComputedProperty",{"range":"197","text":"198"},["199"],"'TimeField' is defined but never used.",["200"],"'alertType' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"203","fix":"207"},[7115,7132],"\"contactNumber\"",{"desc":"208","fix":"209"},{"desc":"203","fix":"210"},"Update the dependencies array to be: [filter, initialRows]",{"range":"211","text":"212"},"Update the dependencies array to be: [ID, dummy, server_URL]",{"range":"213","text":"214"},"Update the dependencies array to be: [curGate, server_URL]",{"range":"215","text":"216"},{"range":"217","text":"214"},"Update the dependencies array to be: [dummy, ID, server_URL]",{"range":"218","text":"219"},{"range":"220","text":"214"},[2370,2383],"[filter, initialRows]",[2496,2503],"[ID, dummy, server_URL]",[3568,3577],"[curGate, server_URL]",[1659,1666],[1597,1608],"[dummy, ID, server_URL]",[1546,1553]]