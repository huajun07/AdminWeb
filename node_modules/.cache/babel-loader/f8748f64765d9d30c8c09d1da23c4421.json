{"ast":null,"code":"import { alertService } from './index.js';\nconst server_URL = \"http://34.87.50.188:8000/api/router\";\n\nconst getGate = (ID, columns) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getTable\",\n      content: {\n        objName: \"gate\",\n        columns,\n        filters: {\n          projectID: ID\n        }\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getDevice = (ID, columns) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getTable\",\n      content: {\n        objName: \"device\",\n        columns,\n        filters: {\n          gateID: ID\n        }\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst createGate = ID => {\n  const newGateReq = {\n    projectID: ID,\n    gateName: \"New Gate\",\n    gateType: \"entry\",\n    isOpenForInvalid: false,\n    isOpenForTemp: false,\n    isChargeable: false,\n    ledOnTime: \"00:00:00\",\n    ledOffTime: \"00:00:00\"\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"createGate\",\n      content: newGateReq\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst createDevice = (gateID, deviceID) => {\n  const newDeviceReq = {\n    deviceID,\n    gateID,\n    deviceName: \"Front Entry Camera\",\n    deviceType: \"LPR camera\",\n    deviceCarpark: \"Trevista Car Park\",\n    deviceStatus: \"online\",\n    manufacturer: \"example manufacturer\",\n    manufacturerCode: \"xyz123\",\n    direction: \"entry\",\n    isPrimaryDevice: true\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"createDevice\",\n      content: newDeviceReq\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getProjectInfo = ID => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getProject\",\n      content: {\n        projectID: ID\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst updateProjectInfo = (ID, state) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"modifyProject\",\n      content: {\n        projectID: ID,\n        modifyParams: state\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nexport { getGate, getDevice, createGate, createDevice, getProjectInfo, updateProjectInfo };","map":{"version":3,"sources":["C:/Users/teowh/Desktop/Projects/Admin_Web/AdminWeb/src/services/api.js"],"names":["alertService","server_URL","getGate","ID","columns","requestOptions","method","headers","body","JSON","stringify","authID","serviceName","content","objName","filters","projectID","fetch","then","response","data","json","ok","error","status","Promise","reject","getDevice","gateID","createGate","newGateReq","gateName","gateType","isOpenForInvalid","isOpenForTemp","isChargeable","ledOnTime","ledOffTime","createDevice","deviceID","newDeviceReq","deviceName","deviceType","deviceCarpark","deviceStatus","manufacturer","manufacturerCode","direction","isPrimaryDevice","getProjectInfo","updateProjectInfo","state","modifyParams"],"mappings":"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","sourcesContent":["import { alertService } from './index.js';\r\n\r\nconst server_URL = \"http://34.87.50.188:8000/api/router\";\r\n\r\nconst getGate = (ID, columns) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"getTable\",\r\n            content: {\r\n            objName: \"gate\",\r\n            columns,\r\n            filters:{\r\n                projectID: ID\r\n            }\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getDevice = (ID, columns) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          authID: \"\",\r\n          serviceName: \"getTable\",\r\n          content: {\r\n            objName: \"device\",\r\n            columns,\r\n            filters:{\r\n              gateID: ID\r\n            }\r\n          }\r\n        })\r\n      };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst createGate = (ID) =>{\r\n    const newGateReq = {\r\n        projectID: ID,\r\n        gateName: \"New Gate\",\r\n        gateType: \"entry\",\r\n        isOpenForInvalid: false,\r\n        isOpenForTemp: false,\r\n        isChargeable: false,\r\n        ledOnTime: \"00:00:00\",\r\n        ledOffTime: \"00:00:00\"\r\n        }\r\n        const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"createGate\",\r\n            content: newGateReq\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst createDevice = (gateID, deviceID) =>{\r\n    const newDeviceReq = {\r\n        deviceID,\r\n        gateID,\r\n        deviceName: \"Front Entry Camera\",\r\n        deviceType: \"LPR camera\",\r\n        deviceCarpark: \"Trevista Car Park\",\r\n        deviceStatus: \"online\",\r\n        manufacturer: \"example manufacturer\",\r\n        manufacturerCode: \"xyz123\",\r\n        direction: \"entry\",\r\n        isPrimaryDevice: true\r\n\r\n        }\r\n        const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"createDevice\",\r\n            content: newDeviceReq\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getProjectInfo = (ID) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"getProject\",\r\n            content: {\r\n            projectID: ID\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst updateProjectInfo = (ID, state) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"modifyProject\",\r\n            content: {\r\n            projectID: ID,\r\n            modifyParams: state\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nexport {\r\n    getGate,\r\n    getDevice,\r\n    createGate,\r\n    createDevice,\r\n    getProjectInfo,\r\n    updateProjectInfo\r\n};"]},"metadata":{},"sourceType":"module"}