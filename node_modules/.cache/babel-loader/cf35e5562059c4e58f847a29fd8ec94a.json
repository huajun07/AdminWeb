{"ast":null,"code":"import { alertService } from './index.js';\nconst server_URL = \"http://34.87.50.188:8000/api/router\";\n\nconst returnFunc = async response => {\n  const data = await response.json();\n\n  if (!response.ok) {\n    // get error message from body or default to response status\n    const error = data && data.content || response.status;\n    return Promise.reject(error);\n  }\n\n  return data;\n};\n\nconst getGate = (ID, columns) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getTable\",\n      content: {\n        objName: \"gate\",\n        columns,\n        filters: {\n          projectID: ID\n        }\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(returnFunc);\n};\n\nconst getDevice = (ID, columns) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getTable\",\n      content: {\n        objName: \"device\",\n        columns,\n        filters: {\n          gateID: ID\n        }\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(returnFunc);\n};\n\nconst createGate = ID => {\n  const newGateReq = {\n    projectID: ID,\n    gateName: \"New Gate\",\n    gateType: \"entry\",\n    isOpenForInvalid: false,\n    isOpenForTemp: false,\n    isChargeable: false,\n    ledOnTime: \"00:00:00\",\n    ledOffTime: \"00:00:00\"\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"createGate\",\n      content: newGateReq\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst createDevice = (gateID, deviceID) => {\n  const newDeviceReq = {\n    deviceID,\n    gateID,\n    deviceName: \"Front Entry Camera\",\n    deviceType: \"LPR camera\",\n    deviceCarpark: \"Trevista Car Park\",\n    deviceStatus: \"online\",\n    manufacturer: \"example manufacturer\",\n    manufacturerCode: \"xyz123\",\n    direction: \"entry\",\n    isPrimaryDevice: true\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"createDevice\",\n      content: newDeviceReq\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getProjectInfo = ID => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getProject\",\n      content: {\n        projectID: ID\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst updateProjectInfo = (ID, state) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"modifyProject\",\n      content: {\n        projectID: ID,\n        modifyParams: state\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getBusinessInfo = ID => {\n  //Pending Function\n  const requestOptions = {};\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst updateBusinessInfo = (ID, state) => {\n  //Pending function\n  const requestOptions = {};\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getGateInfo = ID => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getGate\",\n      content: {\n        gateID: ID\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst updateGateInfo = (ID, state) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"modifyGate\",\n      content: {\n        gateID: ID,\n        modifyParams: state\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst getDeviceInfo = ID => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"getDevice\",\n      content: {\n        deviceID: ID\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nconst updateDeviceInfo = (ID, state) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      authID: \"\",\n      serviceName: \"modifyDevice\",\n      content: {\n        deviceID: ID,\n        modifyParams: state\n      }\n    })\n  };\n  return fetch(server_URL, requestOptions).then(async response => {\n    const data = await response.json();\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.content || response.status;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nexport { getGate, getDevice, createGate, createDevice, getProjectInfo, updateProjectInfo, getBusinessInfo, updateBusinessInfo, getGateInfo, updateGateInfo, getDeviceInfo, updateDeviceInfo };","map":{"version":3,"sources":["C:/Users/teowh/Desktop/Projects/Admin_Web/AdminWeb/src/services/api.js"],"names":["alertService","server_URL","returnFunc","response","data","json","ok","error","content","status","Promise","reject","getGate","ID","columns","requestOptions","method","headers","body","JSON","stringify","authID","serviceName","objName","filters","projectID","fetch","then","getDevice","gateID","createGate","newGateReq","gateName","gateType","isOpenForInvalid","isOpenForTemp","isChargeable","ledOnTime","ledOffTime","createDevice","deviceID","newDeviceReq","deviceName","deviceType","deviceCarpark","deviceStatus","manufacturer","manufacturerCode","direction","isPrimaryDevice","getProjectInfo","updateProjectInfo","state","modifyParams","getBusinessInfo","updateBusinessInfo","getGateInfo","updateGateInfo","getDeviceInfo","updateDeviceInfo"],"mappings":"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","sourcesContent":["import { alertService } from './index.js';\r\n\r\nconst server_URL = \"http://34.87.50.188:8000/api/router\";\r\n\r\nconst returnFunc = async (response) => {\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.content) || response.status;\r\n        return Promise.reject(error);\r\n    }\r\n    return data;\r\n}\r\n\r\nconst getGate = (ID, columns) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"getTable\",\r\n            content: {\r\n            objName: \"gate\",\r\n            columns,\r\n            filters:{\r\n                projectID: ID\r\n            }\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(returnFunc)\r\n}\r\n\r\nconst getDevice = (ID, columns) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          authID: \"\",\r\n          serviceName: \"getTable\",\r\n          content: {\r\n            objName: \"device\",\r\n            columns,\r\n            filters:{\r\n              gateID: ID\r\n            }\r\n          }\r\n        })\r\n      };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(returnFunc)\r\n}\r\n\r\nconst createGate = (ID) =>{\r\n    const newGateReq = {\r\n        projectID: ID,\r\n        gateName: \"New Gate\",\r\n        gateType: \"entry\",\r\n        isOpenForInvalid: false,\r\n        isOpenForTemp: false,\r\n        isChargeable: false,\r\n        ledOnTime: \"00:00:00\",\r\n        ledOffTime: \"00:00:00\"\r\n        }\r\n        const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"createGate\",\r\n            content: newGateReq\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst createDevice = (gateID, deviceID) =>{\r\n    const newDeviceReq = {\r\n        deviceID,\r\n        gateID,\r\n        deviceName: \"Front Entry Camera\",\r\n        deviceType: \"LPR camera\",\r\n        deviceCarpark: \"Trevista Car Park\",\r\n        deviceStatus: \"online\",\r\n        manufacturer: \"example manufacturer\",\r\n        manufacturerCode: \"xyz123\",\r\n        direction: \"entry\",\r\n        isPrimaryDevice: true\r\n\r\n        }\r\n        const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"createDevice\",\r\n            content: newDeviceReq\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getProjectInfo = (ID) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"getProject\",\r\n            content: {\r\n            projectID: ID\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst updateProjectInfo = (ID, state) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"modifyProject\",\r\n            content: {\r\n            projectID: ID,\r\n            modifyParams: state\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getBusinessInfo = (ID) =>{\r\n    //Pending Function\r\n    const requestOptions = {\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst updateBusinessInfo = (ID, state) =>{\r\n    //Pending function\r\n    const requestOptions = {\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getGateInfo = (ID) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"getGate\",\r\n            content: {\r\n                gateID: ID\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst updateGateInfo = (ID, state) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"modifyGate\",\r\n            content: {\r\n                gateID: ID,\r\n                modifyParams: state\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst getDeviceInfo = (ID) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          authID: \"\",\r\n          serviceName: \"getDevice\",\r\n          content: {\r\n              deviceID: ID\r\n          }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nconst updateDeviceInfo = (ID, state) =>{\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            authID: \"\",\r\n            serviceName: \"modifyDevice\",\r\n            content: {\r\n                deviceID: ID,\r\n                modifyParams: state\r\n            }\r\n        })\r\n    };\r\n    return fetch(server_URL, requestOptions)\r\n    .then(async (response) => {\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.content) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    })\r\n}\r\n\r\nexport {\r\n    getGate,\r\n    getDevice,\r\n    createGate,\r\n    createDevice,\r\n    getProjectInfo,\r\n    updateProjectInfo,\r\n    getBusinessInfo,\r\n    updateBusinessInfo,\r\n    getGateInfo,\r\n    updateGateInfo,\r\n    getDeviceInfo,\r\n    updateDeviceInfo\r\n};"]},"metadata":{},"sourceType":"module"}