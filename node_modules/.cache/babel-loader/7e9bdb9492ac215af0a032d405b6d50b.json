{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teowh\\\\Desktop\\\\Projects\\\\Admin_Web\\\\AdminWeb\\\\src\\\\components\\\\Alert.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { alertService, alertType } from '../services/index.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Alert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alerts: []\n    };\n  }\n\n  componentDidMount() {\n    // subscribe to new alert notifications\n    this.subscription = alertService.onAlert(this.props.id).subscribe(alert => {\n      // add alert to array\n      this.setState({\n        alerts: [...this.state.alerts, alert]\n      }); // auto close alert if required\n\n      setTimeout(() => this.removeAlert(alert), 10000);\n    }); // clear alerts on location change\n  }\n\n  componentWillUnmount() {\n    // unsubscribe & unlisten to avoid memory leaks\n    this.subscription.unsubscribe();\n  }\n\n  removeAlert(alert) {\n    this.setState({\n      alerts: this.state.alerts.filter(x => x !== alert)\n    });\n  }\n\n  render() {\n    const {\n      alerts\n    } = this.state;\n    if (!alerts.length) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-absolute\",\n      children: alerts.map((alert, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        variant: alert.type,\n        children: alert.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default {\n  Alert\n};","map":{"version":3,"sources":["C:/Users/teowh/Desktop/Projects/Admin_Web/AdminWeb/src/components/Alert.js"],"names":["React","PropTypes","alertService","alertType","Alert","Component","constructor","props","state","alerts","componentDidMount","subscription","onAlert","id","subscribe","alert","setState","setTimeout","removeAlert","componentWillUnmount","unsubscribe","filter","x","render","length","map","index","type","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,sBAAxC;;AAEA,OAAO,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKC,YAAL,GAAoBT,YAAY,CAACU,OAAb,CAAqB,KAAKL,KAAL,CAAWM,EAAhC,EACfC,SADe,CACLC,KAAK,IAAI;AAChB;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,MAAf,EAAuBM,KAAvB;AAAV,OAAd,EAFgB,CAIhB;;AACAE,MAAAA,UAAU,CAAC,MAAM,KAAKC,WAAL,CAAiBH,KAAjB,CAAP,EAAgC,KAAhC,CAAV;AACH,KAPe,CAApB,CAFgB,CAWhB;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnB;AACA,SAAKR,YAAL,CAAkBS,WAAlB;AACH;;AAEDF,EAAAA,WAAW,CAACH,KAAD,EAAQ;AACf,SAAKC,QAAL,CAAc;AAAEP,MAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAAX,CAAkBY,MAAlB,CAAyBC,CAAC,IAAIA,CAAC,KAAKP,KAApC;AAAV,KAAd;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEd,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACA,QAAI,CAACC,MAAM,CAACe,MAAZ,EAAoB,OAAO,IAAP;AACpB,wBACI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBACKf,MAAM,CAACgB,GAAP,CAAW,CAACV,KAAD,EAAQW,KAAR,kBACR,QAAC,KAAD;AAAmB,QAAA,OAAO,EAAEX,KAAK,CAACY,IAAlC;AAAA,kBACKZ,KAAK,CAACa;AADX,SAAYF,KAAZ;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA5CsC;AA+C3C,eAAe;AAACtB,EAAAA;AAAD,CAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { alertService, alertType } from '../services/index.js';\r\n\r\nexport class Alert extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            alerts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // subscribe to new alert notifications\r\n        this.subscription = alertService.onAlert(this.props.id)\r\n            .subscribe(alert => {\r\n                // add alert to array\r\n                this.setState({ alerts: [...this.state.alerts, alert] });\r\n\r\n                // auto close alert if required\r\n                setTimeout(() => this.removeAlert(alert), 10000);\r\n            });\r\n\r\n        // clear alerts on location change\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // unsubscribe & unlisten to avoid memory leaks\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    removeAlert(alert) {\r\n        this.setState({ alerts: this.state.alerts.filter(x => x !== alert) })\r\n    }\r\n\r\n    render() {\r\n        const { alerts } = this.state;\r\n        if (!alerts.length) return null;\r\n        return (\r\n            <div className=\"position-absolute\">\r\n                {alerts.map((alert, index) =>\r\n                    <Alert key={index} variant={alert.type}>\r\n                        {alert.message}\r\n                    </Alert>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default {Alert} ;"]},"metadata":{},"sourceType":"module"}